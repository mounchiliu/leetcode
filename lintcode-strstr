https://www.lintcode.com/problem/implement-strstr/description 【掌握sol1+RabinKarp】


//find target in source
class Solution {
public:
    int strStr(string source, string  target) {
        int i, j, len_s = source.length(), len_t =  target.length(); //【Note: C++ string.length();】
        if (len_t == 0)  return 0;//异常处理
        for (i = 0; i <= len_s - len_t; i++) { //【注意等号 因为i+j最大取值是lens-lent+lent-1 所以有等号 OR i < len_s-len_t + 1】//对于source从头开始搜的情况 只有这么多。 
            for (j = 0; j < len_t; j++) 
                if (source[i + j] !=  target[j]) break;
            // 匹配成功
            if (j == len_t)  return i;
        }
        return -1; //不用考虑source的长度小于target 因为会直接退出for循环return -1;
    }
};


//my turn
class Solution {
public:
    /**
     * @param source: 
     * @param target: 
     * @return: return the index
     */
    int strStr(string &source, string &target) {
        // Write your code here
        //find target in source
        int len_t = target.size(), len_s = source.size();
        
        if(len_t==0) return 0;  //find target in source. target empty-> position in source is index of 0;
        
        if(len_t>len_s) return -1;
        
        int i, j = 0;
        
        for(i = 0; i <= len_s - len_t; i++){
            for(j = 0; j < len_t; j++){//source taret中同步往后一对一
                if(target[j]!=source[i+j]) break; //不找了,从下一个头开始
            }
             if(j==len_t) return i; //运行完j=len_t-1循环中的if步骤后 执行j++；由于j<len_t以及不满足所以跳出， 但是此时+1的值以及加上去了。
        }
        
       
        return -1;
        
        
    }

};
