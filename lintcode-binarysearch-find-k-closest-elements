https://www.lintcode.com/problem/find-k-closest-elements/description

//思路:直接在数组中二分查找 target, 如果不存在则返回大于 target 的最小的或者小于 target 的最大的元素均可.

//然后使用两根指针从该位置开始向两端遍历, 每次把差值比较小的元素放入答案中然后将该指针向边界方向移动一下即可.
class Solution
{
  public:
    /**
     * @param A an integer array
     * @param target an integer
     * @param k a non-negative integer
     * @return an integer array
     */
    vector<int> kClosestNumbers(vector<int> &A, int target, int k)
    {
        // Algorithm:
        // 1. Find the first index that A[index] >= target
        // 2. set two pointers left = index - 1 and right = index
        // 3. compare A[left] and A[right] to decide move which pointer

        
        if(A.empty())
          return result;
        if(k>A.length())
          return A;
        
        vector<int> result
        int index = firstIndex(A, target); //【Step1】二分法找比target大的第一个数字（也可以找到比target小的最后一个数字）
        int left = index - 1, right = index;
        
        
        for (int i = 0; i < k; i++)
        {
            //找到之后归并排序 e.g. 离target的左边1号和找到的index比较， 23456【7】9 6与7比较，7是target近，右移指针；6与9比较，6近，左移指针...
            // compare A[left] and A[right] to decide move which pointer
            if(isLeftCloser(A, target, left, right)){
                result.push_back(A[left]) ;
                left--;
            }else{
                result.push_back(A[right]);
                right++;
            }
        }
        return result;
    }

  private:
    int firstIndex(vector<int> &A, int target)
    {
        // use binary search algorithm to find the first index that
        // A[index] >= target 找到第一个比target大或等于target的数

        int start = 0, end = A.size() - 1;
        while (start + 1 < end)
        {
            int mid = start + (end - start) / 2;
            if (A[mid] < target) //target在右侧，右移区间
                start = mid;  
            else  //target在左侧，或者target=mid, 左移区间
                end = mid;
        }

       //最后只剩下两个元素查看 【只有这里和模板不一样，因为要找大于等于的】
       ////如果找的是比target小的最后一个数字, 先查看end，且比较符号变成<，其余不变
        if (A[start] >= target)
            return start;
        
        if (A[end] >= target)
            return end;
      
        return A.size();//没找到,则A中都比target小，所以离target最近的是最后一个，所以先返回size，之后要-1；
    }

  bool isLeftCloser(vector<int> &A, int &target, int left, int right){
        //判断边界
        if(left < 0)//A中的第一个就是比target大的数，也就是A中所有的都是比target大的。
            return false;
        if(right >= A.size()) //注意等号
            return true;
            
        if(target - A[left] != A[right] - target)//或者直接使用abs，比较绝对值
            return target - A[left] < A[right] - target; //比较大小
            
        return true;//如果左右指针的数都相等，返回任意一个都可以
    }
};


