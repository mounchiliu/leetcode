https://www.lintcode.com/problem/subsets
//递归枚举(binarytree-2-subset已整理) VS 二进制枚举(用n位二进制数来表示子集的枚举情况，而每一位二进制都表示一个数，所用这个数去检测单位是0还是1)

//二进制
class Solution {
public:
    /**
     * @param nums: A set of numbers
     * @return: A list of lists
     */
    vector<vector<int>> subsets(vector<int> &nums) {
        // write your code here
        if(nums.size() == 0)
            return {{}};
        //子集中的元素排列必须是非降序的，所以排序
        sort(nums.begin(), nums.end());
        
        vector<vector<int>> result;
        int n = 1 << nums.size(); //n表示子集的个数, 1 << nums.size() = 1* 2^nums.size();    
        for(int i = 0; i < n; i++){//子集的一共是n种情况
            vector<int> subset;
            
            for(int j = 0; j < nums.size(); j++){//j表示子集中元素的个数
                //check which bit is 1
                if((i&(1<<j))){ //查看i的第j位是不是0
                    subset.push_back(nums[j]);
                }
            }
            result.push_back(subset);
        }
        return result;
    }
};


//递归
class Solution {
public:
    /**
     * @param nums: A set of numbers
     * @return: A list of lists
     */
    vector<vector<int>> subsets(vector<int> &nums) {
        // write your code here
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        queue<vector<int>> q;
        q.push({});
        
        while(!q.empty()){
            vector<int> subset = q.front(); q.pop();
            result.push_back(subset);
            
            for(int i = 0; i < nums.size(); i++){
                if(subset.empty() || subset.back() < nums[i]){
                    subset.push_back(nums[i]);
                    q.push(subset);
                    subset.pop_back();
                }
            }

        }
        
        return result;
    }
};


