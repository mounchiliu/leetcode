https://www.lintcode.com/problem/longest-palindromic-substring/description   --- 掌握(sol1、sol3)、重点掌握 sol2

Sol1: Naive O(n^3)
class Solution {
public:
    /**
     * @param s: input string
     * @return: a string as the longest palindromic substring
     */
    string longestPalindrome(string &s) {
        // write your code here
        if(s.size() <= 1){
            return s;
        }
        
        int len = 0, start = 0;
        for(int i = 0; i < s.size(); i++){
            for(int j = s.size()-1; j > i; j--){ //固定i，从最长的j开始枚举
                if(j - i + 1 <= len){
                    continue; //剪枝
                }
                
                if(isValid(s, i, j)){
                    //record
                    len = j - i + 1;
                    start = i;
                }
            }
        }
        return s.substr(start, len);
    }
    
private:
    bool isValid(string &s, int left, int right){
        if(s. size() <= 1){
            return true;
        }
        
        while(left < right){
            if(s[left] != s[right]){
                return false;
            }
            
            left++;
            right--;
        }
        return true;
    }
};



SOL1.2: 优化:找最长的回文子串，反过来找，那么第一个找到的就应该是最优的 最差时间复杂度依旧是O（n^3）
class Solution {
public:
    /**
     * @param s: a string which consists of lowercase or uppercase letters
     * @return: the length of the longest palindromes that can be built
     */
    string longestPalindrome(string &s) {
        // write your code here

        //优化:找最长的回文子串，反过来找，那么第一个找到的就应该是最优的 
        //但是时间复杂度（最坏情况依然和上面一样是O(n^3)
        int len,l,r,i;
        for(len = s.length(); len > 0; len --){ //先长度固定、移动指针，再长度依次递减寻找
            for(i = 0; i < s.length()-len+1; i++){ //s.length()-len+1为i起点的极限值（画图可知）  【OR i <= s.length()-len】
                l = i; r = i + len - 1;//index
                while(i<=r&&s[l]==s[r]){ //while(i<r&&s[l]==s[r]){ 对应下方if加上=
                    l++;
                    r--;
                }
                if(i>r){ // 因为找的是最长的所以找到的第一个就是结果  or if(i>=r)
                    return s.substr(i,len);//the first one must be the result
                }
            }
        }
        
        return "";
        
    }



SOL2: 【重要】 O(n^2)
class Solution {
public:
    /**
     * @param s: a string which consists of lowercase or uppercase letters
     * @return: the length of the longest palindromes that can be built
     */
     
    const int expandAroundCenter(string &s, int left, int right){
        while(s[left] == s[right] && left>=0 && right<s.length()){ //left,right 边界检查   //【注意边界问题，比如left有等号】
            left--;
            right++;
        }
        //return length
        return (right-left-1);    //注意: left,right不满足条件时跳出循环，所以是(right-1-【left+1】)+1 处为最后的length
        
    }
     
     
     
    string longestPalindrome(string &s) {
        // write your code here
        int start, longestlen = 0;
        for(int i = 0; i<s.length(); i++){ //【i是对称轴。对于奇数回文有一个对称轴元素，对于偶数回文有两个对称轴元素，分别往左往右expand】
            const int len1 = expandAroundCenter(s,i,i);//奇数回文 //对当前对称轴搜索回文串，返回最长的
            const int len2 = expandAroundCenter(s,i,i+1);//偶数回文 注意:const 用法
            
            int len = max(len1,len2); //c++ max用法
            
            //update start and length
            if(len>longestlen){
                start = i - floor((len-1)/2) ;//可以举例算出来 同时适用于奇偶数回文 注意偶数回文不满足len/2 所以奇偶才用（len-1/2)概括
                longestlen = len;
            }
        }
        
        return s.substr(start,longestlen);
    }

};


SOL3: dynamic programming 时间复杂度 O(n^2)，但是会耗费额外的 O(n^2) 的空间复杂度
class Solution {
public:
    /**
     * @param s: input string
     * @return: a string as the longest palindromic substring
     */
    string longestPalindrome(string &s) {
        // write your code here
        if(s.size() <= 1){
            return s;
        }
        
        //每一对是否是回文，建立在表格的左下角否是回文的基础上，认证当前i,j
        int n = s.size();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        
        
        //initialize the condition that len = 1;
        //即赋值对角线
        for(int i = 0; i < n; i++){
            dp[i][i] = true;
        }
        
        //先一列一列的填写,因为需要看【左下角】找答案
        int maxLen = 1, start = 0;
        for(int right = 1; right < n; right++){
            for(int left = 0; left < right; left++){
                if(s[left] != s[right]){
                    dp[left][right] = false;
                }else{
                    if(right - left < 3){
                        //头尾已经是相等的，头尾去掉后如果只有一个或者没有 一定true
                        dp[left][right] = true;
                    }else{
                         //向左下角看齐，它是true，我i，j位又是true，那就是true
                         //【即向之前缩进去的substr看齐】left应++，right应--
                        dp[left][right] = dp[left+1][right-1];
                    }
                }
                if(dp[left][right] && right - left + 1 > maxLen){
                    maxLen = right - left + 1;
                    start = left;
                }
            }
        }
        return s.substr(start, maxLen);
    }
};





