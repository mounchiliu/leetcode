class Solution {
public:
    /*
     * @param start: a string
     * @param end: a string
     * @param dict: a set of string
     * @return: An integer
     */
    int ladderLength(string &start, string &end, unordered_set<string> &wordList) {
        // write your code here
         if (start == end) {
            return 1;
        }
        
        int n = start.size();
        if (n < 1 || n != end.size()) {
            return 0;
        }
 
        unordered_set<string> dict;//这里为了不改变原给set wordList的值所以又建了一个。
        for (int i = 0; i < wordList.size(); i++) {
            dict.insert(wordList[i]);
        }

        queue<string> Q;
        Q.push(start);
        dict.erase(start);
        int length = 2;
 
        while (!Q.empty()) {           //bfs
            int size = Q.size();
            for (int i = 0; i < size; i++) {
                string word = Q.front(); Q.pop();
                for (int i = 0; i < n; i++) {   //枚举替换的每个位置
                    char oldChar = word[i];  
                    for (char c = 'a'; c <= 'z'; c++) {     //枚举替换的字母
                        if (c == oldChar) continue;
                        word[i] = c;
                        if (dict.find(word) != dict.end()) {	//如果当前字符串在dict
                            if (word == end) {
                                return length;
                            }
                            Q.push(word);				//存入队列中，以后进入下一步数单词的搜索
                            dict.erase(word);			//从dict中除去当前单词
                        }
                    }
                    word[i] = oldChar;
                }
            } // for size
            length++;									//每循环一次，步数+1
        }
        return 0;
        
        
        
    }
};
