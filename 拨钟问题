Question: http://cxsjsxmooc.openjudge.cn/2019t2summer1/002/

用它给定的9种移动, 找出最少的移动方案

Ans:

//BL2814 拨钟问题  by Guo Wei
#include <iostream>
#include <bitset>
#include <algorithm>
#include <functional>
#include <cstring>
using namespace std;
int oriClocks[9];
int clocks[9];
const char * moves[9] = { "ABDE","ABC","BCEF","ADG","BDEFH","CFI","DEGH","GHI","EFHI" };
int moveTimes[9] = {0};
int result[9];
int minTimes = 1 << 30;//选一个很大的值
void Enum(int n) 
{
	if( n >= 9 ) {
		memcpy(clocks,oriClocks,sizeof(clocks));//每次新案例, 重新赋值
		int totalTimes = 0;
		for( int i = 0;i < 9 ; ++ i ) { //依次进行9种移动
			if( moveTimes[i] ) { //0表示不动, 不需要处理 //第n种方案, 第n个字母一定包含（根据题意)
				for( int k = 0; moves[i][k]; ++k) {//寻找使这个位移动的方案
					clocks[moves[i][k]-'A'] = (clocks[moves[i][k]-'A'] + moveTimes[i]) % 4;//calculate current state
					totalTimes += moveTimes[i];
				}
			}
		}
		int i;
		for( i = 0;i < 9; ++i )
			if( clocks[i])//完成拨钟后, 如果有一个不在12点, break, 重新方案
				break;
		if( i == 9) {//9个都满足
			if( minTimes > totalTimes) {
				minTimes = totalTimes;
				memcpy(result,moveTimes,sizeof(result)); 
			} 
		}
		return ;
	}
	for( int i = 0;i < 4; ++ i ) {  //通过观察得知, 一个钟拨4次回到原位 //所以操作只能是0,1,2,3 //0表示不作任何操作
		moveTimes[n] = i;//每一位都有0,1,2,3三种操作
		Enum(n+1); //先initialize, 完毕后, 先处理第九个, 依次往上推
	}
	return ;
} 
int main()
{
	for( int i = 0;i < 9 ; ++i )
		cin >> oriClocks[i]; //input states of clock
	Enum(0);
	for( int i = 0; i < 9; ++i )//Output result
		for( int k = 0; k < result[i] ; ++ k ) 
			cout << i+1 << " ";
	return 0;
}
