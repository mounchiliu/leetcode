https://www.lintcode.com/problem/knight-shortest-path/description

注意destination 和 source 要为0才可以
e.g. 
[[1,1,0,0],[0,0,0,0],[0,1,1,1],[1,1,1,0]]
[1,0]
[2,2]
没有答案 返回-1

/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

//Sol1: 计算 起点到每一个点的距离，最后返回重点的距离
class Solution {
public:
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    int shortestPath(vector<vector<bool>> &grid, Point &source, Point &destination) {
        // write your code here
        if(grid.empty()) return -1;
        if(grid[source.x][source.y] == true || grid[destination.y][destination.y] == true) return -1;//source和destination被遮挡
        if(source.x == destination.x && source.y == destination.y) return 0;

        //Explanation
        //[2,0] 表示 row = 2; col = 0;
        
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>> record(n, vector<int>(m, INT_MAX));//C++ vector 初始化 
        record[source.x][source.y] = 0;//recorder用于记录步数,记录由上一层（上一点）跳到这一点的步数

        vector<vector<int>> d = {{-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}};

        queue<Point> Q;
        Q.push(source);
        while (!Q.empty()) {
            Point head = Q.front(); Q.pop();
            for (int k = 0; k < 8; ++k) {
                int x = head.x + d[k][0];//dir x
                int y = head.y + d[k][1];//dir y
                if (x >=0 && x < n && y >= 0 && y < m && !grid[x][y] &&
                    record[head.x][head.y] + 1 < record[x][y]) {//这一行表示这一点x,y没走过
                    
                    
                    record[x][y] = record[head.x][head.y] + 1;//更新 record 值 从head跳至x、y坐标点处
                    Q.push(Point(x, y));
                }
                //如果recorder初始化是-1 按照如下写法：
                //if(x>=0 && x<m && y>=0 && y<n){//in bound
                //     if(!grid[x][y] && Recorder[x][y]<0){ //not occupied & not visited
                //         Q.push(Point(x,y));
                //         Recorder[x][y] = Recorder[head.x][head.y] + 1;
                //     }
                // }
            }
        }
        if (record[destination.x][destination.y] == INT_MAX)//没更新--> 跳不到
            return -1;
        return record[destination.x][destination.y];
        
        //Question -> How does it knows BFS find the shortest path? --> 画图举例你就能想明白，即在简单图中寻找嘴短距离
        
    }
};



solution 2:  【与上方差别:直接计算层级】 Recommended

/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

class Solution {
public:
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    int shortestPath(vector<vector<bool>> &grid, Point &source, Point &destination) {
        // write your code here
        if(grid.size() == 0){
            return -1;
        }
        
        if(grid[source.x][source.y] == true || grid[destination.y][destination.y] == true) return -1;//source和destination被遮挡
        
        if(source.x == destination.x && source.y == destination.y){
            return 0;
        }
        
        vector<vector<int>> dir ={{-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}};
        queue<Point> Q;
        Q.push(source);
        int cnt = 1;
        while(!Q.empty()){
            int size = Q.size();
            for(int i = 0; i < size; i++){
                Point head = Q.front();
                Q.pop();
                
                for(int j = 0; j < 8; j++){
                    int x_ = head.x + dir[j][0];
                    int y_ = head.y + dir[j][1];
                    
                    if(!inBound(grid, x_, y_)){
                        continue;
                    }
                    if(!grid[x_][y_]){
                        if(x_ == destination.x && y_ == destination.y)
                            return cnt; //【source destination 必须为空】
                    
                        Q.push(Point(x_,y_));
                        grid[x_][y_] = 1;
                        
                    }
                }
            }
            cnt++;
        }
        return -1;
    }
    
private:
    bool inBound(vector<vector<bool>> &grid, int &x, int &y){
        int m = grid.size();
        int n = grid[0].size();
        
        if(x >= 0 && x < m && y >= 0 && y < n){
            return true;
        }
        return false;
    }
};
