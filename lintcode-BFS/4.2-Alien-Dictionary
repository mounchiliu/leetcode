https://www.lintcode.com/problem/alien-dictionary/description
【思路：拓扑序 --- 且如果存在多个拓扑序，返回以正常字典顺序看来最小的】

//题解：

//利用suc存储某个字符的全部后缀(即优先级小于当前字符)，利用pre存储某个字符的全部前缀(即优先级大于当前字符)，chars存储全部出现的字符。
//在构建前缀和后缀map的过程中，s存储上一个字符串，t存储当前字符串，模拟字典序比较，按位比较，不相同说明当前字符是上一个字符串对应位置字符的后缀
//free存储拓扑排序当前的起点（即入度为0的字符），故首先遍历pre，因为p.first一定有前缀，不能作为起点，先从free中清除。
//每次取出free的头部，即为起点，加入答案中，然后清除，遍历后缀，找连接着起点的字符，如果字符前缀为空，也为起点，加入free。


class Solution {
public:
    /**
     * @param words: a list of words
     * @return: a string which is correct order
     */
    string alienOrder(vector<string>& words) {
        map<char, set<char> > graph = constructGraph(words);//【Step 1： 建图】 //map中会按key值排序
        if (!graph.size()) { //如果graph为空， 返回空string   //
            return "";  //if(graph.empty()) return "";
        }

        return topologicalSorting(graph); //【拓扑排序】
    }

    //map：【头文件为#include<map>】map内部是一颗红黑树（非严格平衡二叉树），红黑树有自动排序的功能，所以map内部的所有元素都是有序的，红黑树的每一个节点都代表这map的一个元素。
    //因此对map进行插入、删除、查找等操作都是相当于对红黑树进行操作。最后根据树的中序遍历可以将键值按照大小顺序遍历出来。
    //应用于对顺序有要求的问题，用map会更高效。

    //unordered_map：【头文件#include<unordered_map>】unordered_map内部是一个哈希表（散列表，把关健值映射到哈希表中的某一个位置，这样查找时间复杂度是O(1)），元素的排列顺序是无序的。
    //对于频繁查找的问题，用unordered_map更高效。

    map<char, set<char> > constructGraph(vector<string> &words) {
        map<char, set<char> > graph; //因为题目要求有序 所以使用map
       
        // 【1.1】create nodes
        for(auto &word: words){
             for(int i=0; i<word.size(); i++){
                 char c = word[i];
                
                 if(graph.find(c) == graph.end()){//没找到，initialize
                     graph[c] = set<char>(); //initialize node, 即initialize the key value in the map
                 }
             }
         }

        // 【1.2】create edges //建立关联        
        for(int i=0; i<words.size()-1; i++){
            int index;
            int size = min(words[i].size(),words[i+1].size());
            for(index=0; index<size; index++){ //e.g. ["wrt","wrf"] 从 "wrt"和"wrf" ,我们可以得到 't'<'f'
                if(words[i][index] != words[i+1][index]){
                    if(graph[words[i][index]].count(words[i+1][index])==0){//没记录关联
                        graph[words[i][index]].insert(words[i+1][index]);
                        break;//【重要】
                    }
                }
              }
            
            if(index == size){  //当index 遍历完words[i] 或者 words[i+1], 即前n个元素都是相同的,
                if(words[i].size()>words[i+1].size()) //此时, words中后一个单词长度一定要比前一个单词长
                    return map<char,set<char>>(); //如果不满足，return 空 (因为不满足字典序，即题目中的【顺序无效】返回空)
            }
         }
        return graph;
    }

    map<char, int> getIndegree(map<char, set<char>> &graph) {
        map<char, int> indegree;
        
        //都初始化0，方便后面判断入度==0
        for(auto &node_edges: graph){
            indegree[node_edges.first] = 0;
        }
        
        //count indegree
        for(auto &node_edges: graph){
            for(auto &nb: node_edges.second){
                indegree[nb]++;
            }
        }
        return indegree;
    }
    
    string topologicalSorting(map<char, set<char>> &graph){
        map<char, int> indegree = getIndegree(graph);
        priority_queue<char, vector<char>, greater<char>> Q;//【minheap】，使用heap是因为题目中需要按照字典序大小返回，同一时刻可能有多个节点满足indegree=0，但是要先pop字典序最小的
        
        for(auto &node: indegree){
            if(node.second == 0) //如果计算入度的时候没有初始化0，这里不可以直接使用node.second判断,因为入度为0的没有放进indegree里,
                                 //【indegree的size也会和result.size不一致---得错误答案】
                Q.push(node.first);
        }
        
        string result = "";
        while(!Q.empty()){
            char head = Q.top();//【minheap中，top是最小的字典序】
            Q.pop();
            result += head;
            
            //find the neighbours
            for(auto &nb: graph[head]){
                indegree[nb]--;
                
                if(indegree[nb]==0){
                    Q.push(nb);
                }
            }
        }
        
        if(result.size() != indegree.size()) //没有用到所给的所有字符，表明有部分顺序条件不符合 所以返回空
            return "";
        
        return result;
    }

};
