https://www.lintcode.com/problem/sequence-reconstruction/description
HASH MAP OR BFS

【HASH MAP】
class Solution {
public:
    /**
     * @param org a permutation of the integers from 1 to n
     * @param seqs a list of sequences
     * @return true if it can be reconstructed only one or false
     */
     //【判断是否序列 org 能唯一地由 seqs重构得出】
    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {
        // Write your code here
        unordered_map<int, int> pos, pre;//两个map：pos记录org元素的position
        for (int i = 0; i < org.size(); ++i) pos[org[i]] = i;//对于org每个元素，记录他的位置
        for (auto& seq : seqs) {
            for (int i = 0; i < seq.size(); ++i) {
                if (pos.find(seq[i]) == pos.end()) { //通过给定主键查找元素,没找到：返回unordered_map::end
                    return false;//没找到 seq的元素 org中没有
                }
                if (i > 0 && pos[seq[i - 1]] >= pos[seq[i]]) {//与org的位置矛盾
                    return false;
                }
                if (pre.find(seq[i]) == pre.end()) {//pre中没找着
                    pre[seq[i]] = (i > 0) ? pos[seq[i - 1]] : -1;//如果是seq第一位，就返回-1，否则pos[seq[i - 1]]
                } else {//找到了//赋过值，就看现在位子对比之前有没有往后挪动
                    pre[seq[i]] = max(pre[seq[i]], (i > 0) ? pos[seq[i - 1]] : -1); //找到了 如今pre[seq[i]]里存放的是上一个组合中这个元素前一位的位置，与现在的组合中前一元素的位置比大小
                }
            }
        }
        for (int i = 0; i < org.size(); ++i) {
            if (pre[org[i]] != i - 1) 
                return false;
        }
        return true;
    }
};

【BFS】
//这个解法是根据创造拓扑序列看与org是否满足
【思路：拓扑序，且仅存在一个 --- queue中最多同时只有一个节点】
- second temp accpeted
class Solution {
public:
    /**
     * @param org: a permutation of the integers from 1 to n
     * @param seqs: a list of sequences
     * @return: true if it can be reconstructed only one or false
     */
    bool sequenceReconstruction(vector<int> &org, vector<vector<int>> &seqs) {
        // write your code here

        //org是父序列，应包含所有的元素
        //这题和course schedule有异曲同工之妙
        unordered_map<int,int> cnt_indegree; //key是序列名，val是indegree
        unordered_map<int,unordered_set<int>> element_seq;//record relationship(谁前谁后)
                                                          //【数据结构】通过key(int):序号的名字 访问set(element)。
                                                          //一个key对应一个set, 一个set中可以无序存放多个元素
                                                          //这题不用vector<mul-set>是因为这里是无序的（如题中 example 4）
        
        
        //建立关联，相当于建图中的建立点
        //to initialize the key; --- 【根据org让set和map知道key的值】---因为要保证org是组成的唯一的拓扑序,所以用org initialize it
        for(int &n: org){
            //for each element, initialize a set to it;
            element_seq[n] = unordered_set<int>();//element_seq[n];
            cnt_indegree[n] = 0;//cnt_indegree[n];
            
        }
        
        
        //【统计入度】
        int count = 0;//后面用于判断org是否包含所有给出的字符
        for(auto &seq: seqs){ //取seqs其中一条seq
            count += seq.size();
            if (seq.size() > 0 && (seq[0] < 1 || seq[0] > org.size())) //首先判断size保证seq[0]存在，在查看seq[0]是否符合要求
                return false;
                //【判断当下seq中第一个元素是否符合】
                //seq.size() >=1 --- 大于等于1列的情况 【改成seq[int]？？？答案是0】
                //seq[0]<=0 -> 某条vector的第一个元素小于0，不符合题意，题中规定了n大小
                //seq[0]>org.size() 某条vector中的第一个元素没有在org中出现。
                //这样就不能再org中构造出来，因为一定有一个顺序不满足
             
             //【第一个元素和后面的元素分开判断是因为，对于后面的元素 不仅要判断后续还要计算入度。】
            for(int i = 1; i < seq.size(); i++){
                //判断seq里除了第一个元素，其余元素的合理性
                if(seq[i]<1 || seq[i] > org.size()){ 
                    return false;
                }
                //seq[i]范围判断 + 这个元素有没有在org中出现.
                
                //除了seq第一个元素，其余元素计算入度
                //【如果这个元素和前一个元素的关系还没有在map中有记载,  则记录关系。 关系为前一个元素为key关联一系列他指向的元素】
                if(element_seq[seq[i-1]].count(seq[i])==0){  //【count返回被查找元素关联的set中元素的个数】//count后放入的是被查找元素//这里返回的是元素个数为0的bool 
                    element_seq[seq[i-1]].insert(seq[i]); //统计关联，相当于建图中的建立边
                    cnt_indegree[seq[i]]++;
                }
            }
        }
        
        //【for case [1] [] 】
        if(count<org.size())
            return false;
        
        // 【indegree==0， put into the queue】
        queue<int> Q;
        for(auto &temp: cnt_indegree){
            if(temp.second==0){ //【Note】map.count(element)
                Q.push(temp.first);//first = key, second = value;
            }
        }

        
        //Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence. --> BFS
        int num = 0;
        while(Q.size()==1){//【queue中最多同时只有一个节点】
            int head = Q.front();
            Q.pop();
            if(head!=org[num])//【要保证仅有一个拓扑序的同时还要保证这个拓扑序和org给出的相同】
                return false;
            num++;
            
            
            for(const int &set_ele: element_seq[head]){
                cnt_indegree[set_ele]--;
                
                if(cnt_indegree[set_ele]==0){ //分清 count和直接访问的区别  count返回匹配给定主键的元素的个数，直接访问是访问这个key下储存的对应的值
                    Q.push(set_ele);
                }
            }
        }
        
        return num == org.size();


    }
};



My solution 
- First temp:(Got error) failed on case input: org,seqs
                                        [1],[] -> should return false.
                                        [], [[]] -> should return true
class Solution {
public:
    /**
     * @param org: a permutation of the integers from 1 to n
     * @param seqs: a list of sequences
     * @return: true if it can be reconstructed only one or false
     */
    bool sequenceReconstruction(vector<int> &org, vector<vector<int>> &seqs) {
        // write your code here
        
        //org是父序列，应包含所有的元素
        //这题和course schedule有异曲同工之妙
        unordered_map<int,unordered_set<int>> element_seq;//record sequence element 
        //这边不能像course schedule里用vector因为这里的数字可能是无序的 例如 example 4
        unordered_map<int,int> cnt_indegree;
        
        for(int &n: org){
            //for each element, initialize it;
            element_seq[n] = unordered_set<int>();
        }
        
        
        //统计入度
        for(auto &seq: seqs){
            for(int i = 0; i < seq.size()-1; i++){
                element_seq[seq[i]].insert(seq[i+1]);
                cnt_indegree[seq[i+1]]++;
            }
        }
        
        
        queue<int> Q;
        for(int i = 0; i < cnt_indegree.size(); i++){
            if(cnt_indegree.count(i)==0){ //【Note】map.count(element)
                Q.push(cnt_indegree[i]);
            }
        }

        
        //Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence. --> BFS
        int num = 0;
        while(!Q.empty()){
            int head = Q.front();
            Q.pop();
            if(head!=org[num])
                return false;
            num++;
            
            
            for(auto &set_ele: element_seq[head]){
                cnt_indegree[set_ele]--;
                
                if(cnt_indegree.count(set_ele)==0){
                    Q.push(set_ele);
                }            
            }
        }      
        return true;
    }
};


