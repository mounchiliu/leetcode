https://www.lintcode.com/problem/word-ladder/description
//注意要求输出的不是跳转的次数，而是一共已经了几个word e.g.a->a：1 a->b：2
class Solution {
public:
    /*
     * @param start: a string
     * @param end: a string
     * @param dict: a set of string
     * @return: An integer
     */
    int ladderLength(string &start, string &end, unordered_set<string> &dict) {
        // write your code here
        
        //先考虑集中简单的特殊情况        
        if (start == end) {
            return 1;
        }
        
        int n = start.size();
        if (n < 1 || n != end.size()) {
            return 0;//return 0 if there is no such transformation
        }
        //
       
        queue<string> Q;
        Q.push(start);
        dict.erase(start);
        int length = 2;
 
        while (!Q.empty()) {           //bfs
            int size = Q.size();
            for (int i = 0; i < size; i++) {//对于当前层的每一个节点，作以下操作
                string word = Q.front(); Q.pop();
                
                for (int j = 0; j < n; j++) {   //枚举替换的每个位置,找是否在dict中出现。即找当前节点的分支
                    char oldChar = word[j];  
                    for (char c = 'a'; c <= 'z'; c++) {     //枚举替换的字母
                        if (c == oldChar) continue;
                        word[j] = c;
                        
                         if (word == end) { //字典中可能没有start end e.g."a" "c" dic：["b"] ans：2
                            return length;
                        }
                        if (dict.find(word) != dict.end()) {	//如果新单词存在于dict中
                            Q.push(word);						//存入队列继续搜索
                            dict.erase(word);  //dict中删除，要找最短的，所以要防止重复走
                        }
                    }
                    word[j] = oldChar;//每一个位置a~z试完，复原，尝试下一个位置a~z替换
                    //reset to replace the char in other position of original word(THAT IS find all links between cur_word and word in the dict)
                }
            } // for size
            length++;//一层找完，步数+1
        }
        return 0;
    }
};

//leetcode version（function定义不同）

// version LeetCode
class Solution {
public:
    int ladderLength(string start, string end, vector<string>& wordList) {
        if (start == end) {
            return 1;
        }
        
        int n = start.size();
        if (n < 1 || n != end.size()) {
            return 0;
        }
 
        unordered_set<string> dict;
        for (int i = 0; i < wordList.size(); i++) {
            dict.insert(wordList[i]);
        }

        queue<string> Q;
        Q.push(start);
        dict.erase(start);
        int length = 2;
 
        while (!Q.empty()) {           //bfs
            int size = Q.size();
            for (int i = 0; i < size; i++) {
                string word = Q.front(); Q.pop();
                for (int i = 0; i < n; i++) {   //枚举替换的每个位置
                    char oldChar = word[i];  
                    for (char c = 'a'; c <= 'z'; c++) {     //枚举替换的字母
                        if (c == oldChar) continue;
                        word[i] = c;
                        if (dict.find(word) != dict.end()) {	//如果当前字符串在dict
                            if (word == end) {
                                return length;
                            }
                            Q.push(word);				//存入队列中，以后进入下一步数单词的搜索
                            dict.erase(word);			//从dict中除去当前单词
                        }
                    }
                    word[i] = oldChar;
                }
            } // for size
            length++;									//每循环一次，步数+1
        }
        return 0;
    }
};
