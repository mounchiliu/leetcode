https://www.lintcode.com/problem/course-schedule-ii/description
sol:https://www.jiuzhang.com/solution/course-schedule-ii/#tag-highlight-lang-cpp
【解法思路类似于course schedule 1】

class Solution {
public:
    /**
     * @param numCourses a total of n courses
     * @param prerequisites a list of prerequisite pairs
     * @return the course order
     */
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        // Write your code here
        vector<unordered_multiset<int>> edges(numCourses);
        vector<int> d(numCourses, 0);
        for(int i = 0; i < prerequisites.size(); ++ i) {
            edges[prerequisites[i].second].insert(prerequisites[i].first);
            d[prerequisites[i].first] ++;
        }

        queue<int> q;
        for (int i = 0; i < numCourses; ++i)
            if (d[i] == 0)
                q.push(i);

        vector<int> order;
        while (!q.empty()) {
            int x = q.front(); q.pop();
            order.push_back(x);//要不然取出时计入，要不然push进的时候计入
            for(auto it = edges[x].begin(); it != edges[x].end(); ++ it) {
                -- d[*it];
                if (d[*it] == 0) {
                    q.push(*it);
                }
            }
        }
        if (order.size() == numCourses)//类似course schedule 1, 判断是否符合要求：上完全部课程
            return order;
        return vector<int>();//返回空数组
    }
};
