https://www.lintcode.com/problem/course-schedule/description
【思路：这题其实就是想问有没有拓扑序】
类比：
https://www.lintcode.com/problem/course-schedule-ii/description
【思路：这题问的是给出其中一个拓扑序】

Question: why we use unordered_multiset， instead of unordered_set or vector?

//unordered_multiset 与 unordered_set 的最大区别就是(multiset)前者可以容纳多个相同的值，(set)后者容器中的元素具有唯一性，相同点是两者都是无序的。
//unordered_multiset 与 set的最大区别是前者可以容纳多个相同的值并且容器内部无序，后者容器中的元素具有唯一性并且容器内部有序。
//map保存关键字-值；set只保存关键字。
//具体区分请看：https://blog.csdn.net/qq_41209741/article/details/89431595
//【这题使用multiset是因为，一个点可能多次指向另一个点，这个入度就要多算几次】

class Solution {
public:
    /**
     * @param numCourses a total of n courses
     * @param prerequisites a list of prerequisite pairs
     * @return true if can finish all courses or false
     */
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        // Write your code here
        if(prerequisites.size() == 0){
            return true;//【没有约束，一定可以】
        }
        
        //记录 名字为index的这个数 他后面有哪些东西
        vector<unordered_multiset<int>> edges(numCourses); //vector[i]为一个multiset，multiset的单位是int, 即vector[i]存放 需在i之后的课程名(int类型) 
        vector<int> d(numCourses, 0);
        //【Step1】 find indegree
        for(int i = 0; i < prerequisites.size(); ++ i) {
            edges[prerequisites[i].second].insert(prerequisites[i].first);//比如要学习课程 0 你需要先学习课程 1 ，表示为[0,1]
            d[prerequisites[i].first] ++;
        }
        
        //【优化】
        //for(auto &i: prerequisites){
        //  d[i.first]++;
        //  edges[i.second].insert(i.first);
        //}
        

        //【Step2】indegree == 0 , put into queue
        queue<int> q;
        for (int i = 0; i < numCourses; ++i)
            if (d[i] == 0)
                q.push(i); //num_node++; //要不然取出的时候计数，要不然放入的时候计数。

        //【Step3】indegree -- && indegree == 0 , put into queue
        int node = 0;
        while (!q.empty()) {
            int x = q.front(); q.pop();//要不然取出的时候计数，要不然放入的时候计数。
            node ++;//计算Q中有多少个元素
            for(auto it = edges[x].begin(); it != edges[x].end(); ++ it) { //it-->the element next to the x.
            //or for(auto &nextnode: edges[x]){ //【对于x关联的每一个之后元素都存在edges[x]中，因为x被pop，所以这些点的indegree--】
                -- d[*it];
                if (d[*it] == 0) {
                    q.push(*it);
                    //num_node++; //要不然取出的时候计数，要不然放入的时候计数。
                }
            }
        }
        return node == numCourses;
    }
};

