https://www.lintcode.com/problem/serialize-and-deserialize-binary-tree/description
     //Solution:
     //serialize()采用bfs，对当前二叉树搜索，遍历vector，将当前节点左右儿子依次存入vector，最后空节点需要删去，然后转成字符串。
     //deserialize()首先切割字符串，然后用isLeftChild标记是当前是左右儿子，数字转化为字符串，存为队列首节点的左右儿子。
  
     //按照常规解法，serilize最后可能多几个#占位符。

class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */

    string serialize(TreeNode *root) { //tree -> string
        if (root == NULL) {
            return "{}";
        }
        
        //使用容器方便存储、读取信息。//这里使用vector是因为一个根可能有多个子元素一次性压进去了，使用vector可以方便访问直接q[i]
                                   //且vector尾巴可以出 即pop_back
                                   //这里使用vector最主要是一件给了你树结构，只需要根据BFS一层一层左右往下走就行，走到一个压进vector即可。
        vector<TreeNode *> q;
        q.push_back(root);
        for(int  i = 0; i < q.size(); i++) { //【这里的size是动态，因为不断更新vectorsize获取node】
            TreeNode * node = q[i];
            if (node == NULL) { //该节点NULL 不往下搜索了
                continue;
            }
            q.push_back(node->left);
            q.push_back(node->right);
        }
        while (q[q.size() - 1] == NULL) { //最后一个元素因为没有左右点一定有NULL， 所以删除最后连续的NULL
                q.pop_back();//删除最后一个元素//销毁并抛弃vector的最后一个元素,vector的size改变
        }//用来删除多于NULL
        
        //to string
        //处理开头
        string sb="";
        sb += "{";
        sb += to_string(q[0]->val);
        
        //处理中间部分
        for (int i = 1; i < q.size(); i++) {
            if (q[i] == NULL) {
                sb += (",#");
            } 
            else {
                sb += ",";
                sb += to_string(q[i]->val);
            }
        }
        
        //处理结尾
        sb += "}";
        return sb;
    }
    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
     vector<string> split(const string &str, string delim) {
        vector<string> results;
        int lastIndex = 0, index;
        while ((index = str.find(delim, lastIndex)) != string::npos) { //这里表示若找到了 find delimma's position //string::npos说明查找没有匹配
            results.push_back(str.substr(lastIndex, index - lastIndex));
            lastIndex = index + delim.length();//更新到下一个不是delim的头位置
        }
        if (lastIndex != str.length()) { //全部找完之后，之后 由于，后面可能还有元素 lastIndex不是str的结尾，把剩下的push进去
            results.push_back(str.substr(lastIndex, str.length() - lastIndex));
        }
        return results;
    }
    
    TreeNode * deserialize(string &data) { //string -> tree //转化成二叉树，二叉树的遍历->queue BFS
                                           //这里使用的是queue而非vector是因为，遍历一层后，pop头元素，queue是先进先出可以pop vector是pop_back删除尾元素
                                           //而且使用vector还需要记录在string vector中走到哪，而queue是一层一层遍历，一层遍历完，子根就删除，更方便
        // write your code here
        if (data == "{}") return NULL;
        vector<string> vals = split(data.substr(1, data.size() - 2), ",");//-2是因为掐头去尾---两次len减少
        TreeNode *root = new TreeNode(atoi(vals[0].c_str()));//【初始化对象，需要用treeNode(val)】//atoi (表示 ascii to integer) 
        queue<TreeNode *> Q;//使用队列存储Node
        Q.push(root);
        bool isLeftChild= true;//先从左树开始所以先初始化true
        for (int i = 1; i < vals.size(); i++) {
            if (vals[i] != "#") {//不是NULL
                TreeNode *node = new TreeNode(atoi(vals[i].c_str())); //atoi (表示 字符串转换成整数形式)，
                                                                      //且atoi里面要是char 指针（字符串指针），所以string.c_str()把string转换成字符串指针
                if (isLeftChild) Q.front()->left = node;
                else Q.front()->right = node;
                Q.push(node);
            }
            if (!isLeftChild) {
                Q.pop();//当在右边的数缓存好之后，删除首元素，即这个子树的根
            }
            isLeftChild = !isLeftChild;//每次缓存，flip the bool
        }
        return root;
    }
};



myanswer:
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */


class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
     
     //Solution:
     //serialize()采用bfs，对当前二叉树搜索，遍历vector，将当前节点左右儿子依次存入vector，空节点需要删去。
     //deserialize()首先切割字符串，然后用isLeftChild标记是当前是左右儿子，数字转化为字符串，存为队列首节点的左右儿子。
     
     //Serialize: 基本是BFS的思路，缔造一个vector，然后把二叉树里的元素一层层往里塞，完了后移除最后的Null，然后转换成字符串
     //Deserialize：先是字符串的切割，转换成vector，然后按照左右左右的次序依次把节点挂载在当前index所指向的节点上。
     
     //按照常规解法，serilize最后可能多几个#占位符。
     
    string serialize(TreeNode * root) {
        // write your code here
        if(root == NULL) return "{}";
        
        //常规解法
/*        queue<TreeNode*> Q;
        Q.push(root);
        string result = "";
        result+="{";
        
        
       while(!Q.empty()){
            auto head = Q.front();
            Q.pop();
            
            if(head != NULL){
                result+=to_string(head->val); //int to string
                Q.push(head->left);
                Q.push(head->right);
                
            }
            else
            {
                result+="#";
            }
            
            if(!Q.empty()){
                result+=",";
            }
        }
       
       result+="}";
       return result;
*/


    //用于BFS遍历并且整理节点
    vector<TreeNode*> treeNodes;
    treeNodes.push_back(root);
    string result = "{";
    
    for(int i = 0; i < treeNodes.size(); i++){ //这里的size是动态的, 一直在变
        auto node = treeNodes[i];
        if(node != NULL){
            treeNodes.push_back(node->left);
            treeNodes.push_back(node->right);
        }
        else{
            continue; //跳过
        }
    }
    
    while(treeNodes[treeNodes.size()-1] == NULL){ //最后一个元素是NULL-> 无意义，删除
        treeNodes.pop_back();
    }
        
    for(int i = 0; i < treeNodes.size(); i++){
        if(treeNodes[i] != NULL){
            result += to_string(treeNodes[i]->val);
        }
        else{
            result += "#";
        }
        
        if(i!=treeNodes.size()-1){ //the last element
            result += ",";
        }
        
    }

    result += "}";
    
    return result;

    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    //先是字符串的切割，转换成vector，然后按照左右左右的次序依次把节点挂载在当前index所指向的节点上。
    vector<string> splitdata(const string &data, string delim){ //这个function这很重要
        vector<string> result;
        
        int lastindex = 0, index;
        
        while((index=data.find(delim,lastindex))!=string::npos){//string.find(s,int); 从int这个下标处查找s
            result.push_back(data.substr(lastindex,index-lastindex));
            lastindex = index+delim.length(); //用于跳转到下一个不是delim的地方
        }
        
        //余下的尾巴也要算进去
        if(lastindex != data.length()){
            result.push_back(data.substr(lastindex,data.length()-lastindex));
        }
        
        return result;
        
    }
     
     
    TreeNode * deserialize(string &data) {
        // write your code here
        if(data == "{}") return NULL;
        
        //splite input string
        vector<string> ssplitdata = splitdata(data.substr(1,data.size()-2),",");//去除两个{、}
        //atoi 将字符串转化成整数
        TreeNode* root = new TreeNode(atoi(ssplitdata[0].c_str()));
        queue<TreeNode*> Q;
        Q.push(root);
        
        //先左后右
        bool leftchild = true;
        for(int i = 1; i < ssplitdata.size(); i++){
            if(ssplitdata[i] != "#"){
                TreeNode *node = new TreeNode(atoi(ssplitdata[i].c_str()));
                if(leftchild)
                    Q.front()->left = node;
                else
                    Q.front()->right = node;
                
                Q.push(node);
            }

            if (!leftchild) { // 右节点处理完，删去父节点。->是的Q.front()返回正确元素
                Q.pop();
            }
            //遍历一个元素就翻转一次
            leftchild = !leftchild;
        }
        return root;
    }
};
