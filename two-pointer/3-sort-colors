https://www.lintcode.com/problem/sort-colors/description
//思路1:两重循环, 先分0与1,2；再分1,2； 即两次partition
//思路2:三指针, 保证L左边都是0，R右边都是2, 中间放1
class Solution {
public:
    /**
     * @param nums: A list of integer which is 0, 1 or 2 
     * @return: nothing
     */
    void sortColors(vector<int> &nums) {
        // write your code here
        
        if(nums.size() == 0){
            return;
        }
        
        int left = 0, right = nums.size()-1;
        int mid = 0;//mid从左往右依次查元素
        //def:
        //all in [0,L) == 0 :L表示L左边的都是0，处理好的
        //all in [L,mid) == 1: 若L与mid中间有空格，那必然是1
        //all in (R,len - 1) == 2 :R表示R的右边都是2，处理好的
        while(mid <= right){ //mid = R时 还需要检查R此处的值再分类，因为只能保证R右侧的处理好了。所以包含等于
            if(nums[mid] == 0){
                swap(nums[mid], nums[left]);
                left++;//移动左指针，相当于移动0的右边界
                mid++;//【移动mid指针 查看下一个元素且保证mid与left重合或mid在left右边】 
                       //因为mid之前的都是已经处理过的 要不然就是0，要不然就是1；
                      //若从left处交换过来0，只能在left和mid指向同一个位置的时候发生,mid++保证和left一起往前走，没毛病; 
                      //left 和 mid 不指向一个位置, 则一定是因为mid遇到了1进行了mid++，则left处一定为1, mid++也没毛病
  
            }
            else if(nums[mid] == 2){
                swap(nums[mid], nums[right]);
                right--;//移动右指针，相当于移动2的左边界//这里没有mid++只因为要换过来的数在mid处，要判断这个数大小
            }
            else if(nums[mid] == 1){
                mid++;
            }
        }
    }
};
