https://www.lintcode.com/problem/sort-colors/description

class Solution {
public:
    /**
     * @param nums: A list of integer which is 0, 1 or 2 
     * @return: nothing
     */
    void sortColors(vector<int> &nums) {
        // write your code here
        
        if(nums.size() == 0){
            return;
        }
        
        int left = 0, right = nums.size()-1;
        int mid = 0;//mid从左往右依次查元素
        //def:
        //all in [0,L) == 0
        //all in [L,mid) == 1
        //all in (R,len - 1) == 2
        while(mid <= right){ //mid = R时 还需要检查此处的值再分类。所以包含等于
            if(nums[mid] == 0){
                swap(nums[mid], nums[left]);
                left++;//移动左指针，相当于移动0的右边界
                mid++;//移动mid指针，这里是为了保证[L,mid) == 1 //且mid之前的都是已经处理过的 要不然就是0，要不然就是1；
                      //首先mid要保证在left右边，且要保证mid看到下一个元素，所以mid++
  
            }
            else if(nums[mid] == 2){
                swap(nums[mid], nums[right]);
                right--;//移动右指针，相当于移动2的左边界//这里没有mid++只因为要换过来的数在mid处，要判断这个数大小
            }
            else if(nums[mid] == 1){
                mid++;
            }
        }
    }
};
