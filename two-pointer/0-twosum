https://www.lintcode.com/problem/two-sum/description

Version 1 Hashmap: 时间复杂度O(n), 空间复杂度O(n)
Version 2 twoPointers 时间复杂度O(nlogn)、空间复杂度O(n)；如果是针对已排序数组，时间复杂度为O(1)，因为不需要额外空间来找对应index

class Solution {
public:
    /**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1 + 1, index2 + 1] (index1 < index2)
     */
    vector<int> twoSum(vector<int> &numbers, int target) {
        // write your code here
        if(numbers.size() <= 1)
            return {};
            
        unordered_map<int, int> map;
        for(int i = 0; i < numbers.size(); i++){
            map[numbers[i]] = i;
        }
        for(int i = 0; i < numbers.size(); i++){
            int comp = target - numbers[i];
            if(map.find(comp) != map.end() && map[comp] != i){
                return {i, map[comp]};
            }
        }
        return {};     
    }
};



class Solution {
public:
    /**
     * @param numbers: An array of Integer
     * @param target: target = numbers[index1] + numbers[index2]
     * @return: [index1 + 1, index2 + 1] (index1 < index2)
     */
    vector<int> twoSum(vector<int> &numbers, int target) {
        // write your code here
        if(numbers.size() <= 1)
            return {};
        vector<int> backUp = numbers;    
        sort(numbers.begin(), numbers.end());
        int left = 0, right = numbers.size() - 1;
        
        while(left < right){
            if(numbers[left] + numbers[right] == target){
                break;
            }else if(numbers[left] + numbers[right] > target){
                right--;
            }else{
                left++;
            }
        }
        //find the index;
        int result1 = -1, result2 = -1;//index from 0~n-1
        for(int i = 0; i < backUp.size(); i++){
            //查询index
            if(result1 == -1 && numbers[left] == backUp[i]){ //check whether the index is found
                result1 = i;
            }
            else if(result2 == -1 && numbers[right] == backUp[i]){
                result2 = i;
            }
            //查询完毕，检查有没有都找到，没有则继续找，有则返回
            if(result1 != -1 && result2 != -1){
                return {min(result1,result2), max(result1,result2)}; //返回这两个数的下标, 并且第一个下标小于第二个下标
            }
        }       
        return {};        
    }
};
