https://www.lintcode.com/problem/partition-array/
(快排、快选的灵魂所在)
//与quick sort不同之处：
//quickSort 等于的情况左右两边都可以放，而这一题规定，所有小于k的元素移到左边，所有大于等于k的元素移到右边
class Solution {
public:
    /**
     * @param nums: The integer array you should partition
     * @param k: An integer
     * @return: The index after partition
     */
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0)
            return 0;
            
        int left = 0, right = nums.size() - 1;
        while(left <= right){
            while(left <= right && nums[left] < k){//扫描，大于等于pivot(即k)的丢到右边去
                left++;
            }
            while(left <= right && nums[right] >= k){ //扫描，小于pivot的丢到左边去
                right--;
            }
            
            if(left <= right){
                swap(nums[left], nums[right]);
                left++;
                right--;
            }
        }
        return left;//返回数组划分的位置，即数组中第一个位置 i，满足 nums[i] 大于等于 k。
                    //大于等于的在右边，所以返回右边第一个，而这里left和right已经交汇，所以left在右边，right在左边，返回left；
    }
};
