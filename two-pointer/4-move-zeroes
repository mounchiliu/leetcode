https://www.lintcode.com/problem/move-zeroes/description
思路:同向双指针
使用两个指针快慢指针，慢为新数组的指针，快为原数组的指针，快指针向后扫，遇到非0的数就赋值给慢的指针位置，并将慢指针向后移动

时间复杂度O(n)
空间复杂度O(1)

常规版 VS 如何保证修改次数最少

//Version 1 常规版
class Solution {
public:
    /**
     * @param nums: an integer array
     * @return: nothing
     */
    void moveZeroes(vector<int> &nums) {
        // write your code here
        if(nums.size() == 0)
            return;
        int slow = 0;    
        for(int fast = 0; fast < nums.size(); fast++){
            //双指针，slow代表新数组，fast代表老数组，从左往右先遍历
            if(nums[fast] != 0){
                swap(nums[slow], nums[fast]);
                slow++;
            }
        }
    }
};

//Version 2 保证修改次数最少
class Solution {
public:
    /**
     * @param nums: an integer array
     * @return: nothing
     */
    void moveZeroes(vector<int> &nums) {
        // write your code here
        if(nums.size() == 0)
            return;
        int slow = 0;    
        for(int fast = 0; fast < nums.size(); fast++){
            //双指针，slow代表新数组，fast代表老数组，从左往右先遍历
            if(nums[fast] != 0){
                if(fast != slow){ //两指针错开，指向不同数才swap进行写操作
                                  //【注意】 (slow，fast)之间一定都是0，且如果slow 与 fast 之间有间隔元素，则slow一定指向的是0
                                  //而当fast为非0时才需要换值，此时fast与slow所指的数一定不相同；所以这里如果写nums[fast] != nums[slow]就毫无意义，直接判断指针是否重合即可
                    nums[slow] = nums[fast]; //保证写次数最少则不能使用swap，因为一次swap有三次写入
                                             //直接覆盖值，最后处理末尾的写成0即可
                }
                slow++;
            }
        }
        //从slow往前的都是处理好的非零元素，从slow往后的都是没有处理的应该归0的元素
        while(slow < nums.size()){
            if(nums[slow] != 0){//最小化写的操作
                nums[slow] = 0;
            }
            slow++;
        }
    }
};
