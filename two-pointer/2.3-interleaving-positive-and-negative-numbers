https://www.lintcode.com/problem/interleaving-positive-and-negative-numbers/description
//1. 先partition，2.再交替
class Solution {
public:
    /*
     * @param A: An integer array.
     * @return: nothing
     */
    void rerange(vector<int> &A) {
        // write your code here
        if(A.size() <= 1){
            return;
        }
        
        //1.统计正数和负数的情况
        int neg = 0, pos = 0;
        for(int i = 0; i < A.size(); i++){
            if(A[i] < 0){
                neg++;
            }else{
                pos++;
            }
        }
        
        //partition 分开正负 //且pos多,pos先开始,neg多neg先开始
        partition(A, pos>neg); 
        //交替分配
        interleave(A, pos==neg);
        
    }
    
private:
    void partition(vector<int> &A, bool startPositive){
        int left = 0, right = A.size() - 1;
        int flag = startPositive ? 1 : -1;
        
        while(left <= right){
            while(left <= right && A[left]*flag > 0){ //0为pivot//startPositive,则flag = 1, 正数在左
                 left++;//startNegative,则flag = -1, 负数在左 
            }
            while(left <= right && A[right]*flag <0){
                right--;
            }
            
            if(left <= right){
                swap(A[left], A[right]);
                
                left++;
                right--;
            }
        }
    }
    
    void interleave(vector<int> &A, bool has_same_length){
        int left = 1, right = A.size() - 1;
        if (has_same_length) {
            right = A.size() - 2; //has_same_length, 则最后一个不要动，从导数第二个开始挪动
        }
        while (left < right) {
            swap(A[left], A[right]);
            
            left += 2;
            right -= 2;
        }
    }
};
