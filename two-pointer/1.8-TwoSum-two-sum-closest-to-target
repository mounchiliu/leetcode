https://www.lintcode.com/problem/two-sum-closest-to-target/

//简洁版
class Solution {
public:
    /**
     * @param nums: an integer array
     * @param target: An integer
     * @return: the difference between the sum and the target
     */
    int twoSumClosest(vector<int> &nums, int target) {
        // write your code here
        if(nums.size() <= 1){
            return -1;
        }
        
        sort(nums.begin(), nums.end());
        int result = INT_MAX;
        int left = 0, right = nums.size() - 1;
        while(left < right){
            int diff = abs(target - (nums[left] + nums[right]));
            result = min(diff, result);
            if(nums[left] + nums[right] < target){
                left++;
            }else if(nums[left] + nums[right] > target){
                right--;
            }else{//abs = 0
                return 0;
            }
        }
        return result;
    }
};

//易懂版
class Solution {
public:
    /**
     * @param nums: an integer array
     * @param target: An integer
     * @return: the difference between the sum and the target
     */
    int twoSumClosest(vector<int> &nums, int target) {
        // write your code here
        if(nums.size() <= 1){
            return -1;
        }
        
        sort(nums.begin(), nums.end());
        int result = INT_MAX;
        int left = 0, right = nums.size() - 1;
        while(left < right){

            if(nums[left] + nums[right] < target){
                if(abs(target - (nums[left] + nums[right])) < result){
                    result = abs(target - (nums[left] + nums[right]));
                }
                left++;
            }else if(nums[left] + nums[right] > target){
                if(abs(target - (nums[left] + nums[right])) < result){
                    result = abs(target - (nums[left] + nums[right]));
                }
                right--;
            }else{//abs = 0
                return 0;
            }
        }
        return result;
    }
};
