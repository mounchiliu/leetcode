https://www.lintcode.com/problem/triangle-count/description

//a, b, c 三条边组成三角形的充要条件：任意两边之和大于第三遍 or 最短的两边之和大于最长边
//时间复杂度为 O(n^2), 外层遍历最大边是n，内层循环移动双指针是n，所以总复杂度为 O(n^2)
//空间复杂度为 O(1), 只需占用常量空间。

class Solution {
public:
    /**
     * @param S: A list of integers
     * @return: An integer
     */
    int triangleCount(vector<int> &S) {
        // write your code here
        if(S.size() < 3)
            return 0;
            
        sort(S.begin(), S.end());
        int cnt = 0;
        for(int i = S.size()-1; i >=2; i--){
            int left = 0, right = i-1;
            
            while(left < right){
                if(S[left] + S[right] > S[i]){//可以构成三角形
                //最小边的索引为left+1, left+2,...,right-1时，都能与S[right]和S[i]构成三角形。
                //所以满足条件的三角形找到了right-left个。然后right指针左移进入下一轮。
                    cnt += right - left; //更新cnt 
                    right--;//这题不需要去重
                }
                else if(S[left] + S[right] <= S[i]){//不能构成三角形
                    left++;
                }
            }
        }
        return cnt;
    }
};
