https://www.lintcode.com/problem/search-a-2d-matrix-ii/description
不是二分法，但是面试经常面到

这个矩阵的第二行并没有规定严格大于第一行，有可能第二行中会出现比第一行的某个数还要小的情况
求：给的target在矩阵中出现的次数
因为这个矩阵规定每一行单独递增、每一列单独递增---我们发现在矩阵中的任何一个子矩阵的左上角是最小的，右下角是最大的 
--- 通过这样的特性可删除整行、整列---e.g.通过O（1）的比较删掉O（n）操作（一列的比较）
时间复杂度O（m+n）m、n为行、列数 最坏情况 每一次都不能通过target与数值的比较删列或行，或这个元素在每一行或列都出现

【思路】从左下角开始往右上角逼近、或者右上角出发往左下角逼近
Q？为什么不从左上角或者右下出发，因为target比它小(左上角), 只能表明不在这个矩形内，比它大表明在这个矩形内却不能定位他在哪，没有意义 --- 同理右下角
因为对于左上角和右上角是row和col的最大值或最小值；---不知道移动row指针还是col指针
对于左下角是当前col最大值，当前row最小值，你可以定位到row指针移动还是col指针移动---同理右上角

class Solution {
public:
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    int searchMatrix(vector<vector<int>> &matrix, int target) {
        // write your code here
        if(matrix.empty())
            return 0;
        
        int row = 0;
        int col = matrix[0].size() - 1;
        int count = 0;
        while(row<matrix.size() && col>=0){
            if(matrix[row][col] == target){
                count++;
                col--;//已经搜到，因为每一列排序也没有重复的数，跳过
                
            }
                
            
            if(matrix[row][col] > target){ //这一列的第一个元素是最小的，如果targe比这个还小，这一列不要
                col--; //这一列不搜索，跳过
            }else{
                row++; //往下搜//等于的时候也往下，因为对应的这一行也没有重复数字，跳过
            }
            
        }
        return count;
    }
};


