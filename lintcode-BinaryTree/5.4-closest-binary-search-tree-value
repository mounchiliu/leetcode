https://www.lintcode.com/problem/closest-binary-search-tree-value/description
【思路】
如果分别寻找lowerBound和upperBound，时间复杂度为O(h) h为BST的高度 更优
如果使用中序遍历查找，需要一个个查看，所以时间复杂度为O(n)

Version 1
class Solution {
public:
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    int closestValue(TreeNode * root, double target) {
        // write your code here
        if(root == NULL)
            return 0;
    
        TreeNode *lowerNode = lowerBound(root, target);
        TreeNode *upperNode = upperBound(root, target);
        
        if(lowerNode == NULL)
            return upperNode->val;
        if(upperNode == NULL)
            return lowerNode->val;
        
        if(target - lowerNode->val > upperNode->val - target){
            return upperNode->val;
        }
        
        return lowerNode->val;
    }
    
private:
    //find the node with the largest value that smaller than target
    TreeNode *lowerBound(TreeNode *root, double target){
        if(root == NULL)
            return NULL;
            
        if(target <= root->val)
            return lowerBound(root->left, target);
        
        //root->val < target
        TreeNode *lowerNode = lowerBound(root->right, target);
        if(lowerNode != NULL)
            return lowerNode;
            
        return root;
    }
    
    //find the node with the smallest value that larger than or equal to target
    TreeNode *upperBound(TreeNode *root, double target){
        if(root == NULL)
            return NULL;
        
        if(root->val < target)
            return upperBound(root->right, target);
            
        //root->val >= target
        TreeNode *upperNode = upperBound(root->left, target);
        if(upperNode != NULL)
            return upperNode;
        
        return root;
    }
};



Version 2【遍历】
class Solution {
public:
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    int closestValue(TreeNode * root, double target) {
        // write your code here
        int closest = root->val;
        while (root) {
            if (abs(closest - target) >= abs(root->val - target)) {
                closest = root->val;
            }
            root = target < root->val ? root->left : root->right;
        }
        return closest;        
    }
};
