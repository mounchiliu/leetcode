https://www.lintcode.com/problem/closest-binary-search-tree-value/description
【思路】
如果分别寻找lowerBound和upperBound，时间复杂度为O(h) h为BST的高度 更优
如果使用中序遍历查找，需要一个个查看，所以时间复杂度为O(n)

Version 1 时间复杂度 O(h)
class Solution {
public:
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    int closestValue(TreeNode * root, double target) {
        // write your code here
        if(root == NULL)
            return -1;
    
        TreeNode *lowerNode = lowerBound(root, target);
        TreeNode *upperNode = upperBound(root, target);
        
        //其中一个有值，直接返回另一个即可 --- 两个都没有值不可能存在 除非他是NULL
        if(lowerNode == NULL)
            return upperNode->val;
        if(upperNode == NULL)
            return lowerNode->val;
        
        //两个都有值
        if(target - lowerNode->val > upperNode->val - target){
            return upperNode->val;
        }
        
        return lowerNode->val;
    }
    
private:
    //find the node with the largest value that smaller than target
    TreeNode *lowerBound(TreeNode *root, double target){
        if(root == NULL)
            return NULL;
          
         //需要寻找比target小的最大的数，如果 root比target大或相等，不考虑，往左看
        if(target <= root->val)
            return lowerBound(root->left, target);
        
        //root->val < target
        TreeNode *lowerNode = lowerBound(root->right, target);
        if(lowerNode != NULL)
            return lowerNode;
            
        return root;
    }
    
    //find the node with the smallest value that larger than or equal to target
    TreeNode *upperBound(TreeNode *root, double target){
        if(root == NULL)
            return NULL;
        
        //需要寻找比target大或等于的最小的数，如果root比target还要小，不考虑root和他的左子树，往右继续查找。
        if(root->val < target) 
            return upperBound(root->right, target);
            
        //root->val >= target
        TreeNode *upperNode = upperBound(root->left, target);
        if(upperNode != NULL)
            return upperNode;
        
        return root;//如果没找到upperNode，返回root，因为root是第一个找到的第一个满足要求的（即：大于等于）
    }
};



Version 2【遍历】时间复杂度O(n)
class Solution {
public:
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    int closestValue(TreeNode * root, double target) {
        // write your code here
        if(root == NULL)
            return -1;
            
        //Traverse    
        int closest = root->val;//closest node val
        while (root) {
            if (abs(closest - target) >= abs(root->val - target)) { //判断root处 //等号可以不写
                closest = root->val; //Update closest node
            }
            root = target < root->val ? root->left : root->right; //往左OR往右走 //OR  root = root->val >= target ? root->left : root->right;
        }
        return closest;        
    }
};
