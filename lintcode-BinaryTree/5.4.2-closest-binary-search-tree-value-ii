https://www.lintcode.com/problem/closest-binary-search-tree-value-ii/description
5.4的follow up：寻找k个最接近的值
思路：找到target的lowerbound和upperbound，两个指针一个找前驱，一个找后序
时间复杂度是O(k+h) h为高度

实现如下的子函数：
- getStack() => 在假装插入 target 的时候，看看一路走过的节点都是哪些，放到 stack 里，用于 iterate
- moveUpper(stack) => 根据 stack，挪动到 next node
- moveLower(stack) => 根据 stack, 挪动到 prev node
有了这些函数之后，就可以把整个树当作一个数组一样来处理，只不过每次 i++ 的时候要用 moveUpper，i--的时候要用 moveLower


/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: the given BST
     * @param target: the given target
     * @param k: the given k
     * @return: k values in the BST that are closest to the target
     */
    vector<int> closestKValues(TreeNode * root, double target, int k) {
        // write your code here
        if(k == 0 || root == NULL)
            return {};
        
        //get boundaries --- 相当于定位target在树上的那几个节点之间，分别把关联节点放入stack，最靠近stack头上的离target越近
        stack<TreeNode*> lowerStack;
        stack<TreeNode*> upperStack;
        while(root != NULL){
            if(target < root->val){
                 upperStack.push(root);
                 root = root->left; //try smaller values to find bound
            }
            else{
                lowerStack.push(root);
                root = root->right; //try larger values to find bound
            }
        }
        
        //get k elements
        //move less 针对于lowerBounder --- 相当于左半边数组的指针往左移动
        //move up 针对于upperBounder --- 相当于右半边的数组指针向右移动
        vector<int> result;
        for(int i = 0; i < k; i++){
            //其中一个为空，直接塞另一个的数，注意要continue返回
            if(lowerStack.empty()){ //k<=node总数，所以一个为空，另一个一定不为空
                result.push_back(upperStack.top()->val);
                moveup(upperStack);
                continue;
            }
            if(upperStack.empty()){
                result.push_back(lowerStack.top()->val);
                moveless(lowerStack);
                continue;
            }
            //两个都有数的时候
            if(target - lowerStack.top()->val < upperStack.top()->val - target){
                result.push_back(lowerStack.top()->val); 
                moveless(lowerStack);//最匹配的已经找到了，现在在最匹配的下面的节点寻找有没有更匹配的，如果下面没有符合的节点会直接使用之前已经push进stack里的剩余节点
            }else{
                result.push_back(upperStack.top()->val);
                moveup(upperStack);
            }
        }
        return result;
    }
private:
    void moveless(stack<TreeNode*>& lStack){
        TreeNode* node = lStack.top();
        lStack.pop();//当前结点被取出来之后，相当于左半边数组的指针要往左移动
        if (node->left){//move less 是找 比当前结点小的所有数，且尽量找到比target小的最大数
        //所以以当前结点往左后找到比他小的最小值，然后一直往右--因为需要尽量找大的数和target匹配最小残差
            node = node->left;
            while (node){
                lStack.push(node);
                node = node->right;
            }
        }
    }
    
    void moveup(stack<TreeNode*>& rStack){
        TreeNode* node = rStack.top();
        rStack.pop();
        if (node->right){
            node = node->right; //turn right之后往左，最小的数在stack头上，是为了找比target大的最小的数
            while (node){
                rStack.push(node);
                node = node->left;
            }
        }
    }
};

