https://www.lintcode.com/problem/minimum-subtree/description
此题分为两解: 遍历+分治法 以及 纯分治法

Version 1【遍历 + 分治】 --- 遍历没个点，更新他们的sum，再和当前最小的比较值来更新信息
                            每次分左右节点计算sum---实现了之前计算的结果可以在他的爸爸处复用
                            相当于使用每个节点的值已经在那了，我用递归把这些值搜集，然后比较得出结论
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
    TreeNode * findSubtree(TreeNode * root) {
        // write your code here
        getSum(root);
        return minRoot;
    }
    
private:
    //定义全局变量 --- 因为每次递归需要对这两个值进行更新， 遍历法一般使用的是【全局变量】来获取结果
    int minSum =INT_MAX;
    TreeNode *minRoot = NULL;
    
    //返回以当前节点为根的子树中，所有节点之和
    int getSum(TreeNode *root){
        //递归的退出
        if(root == NULL) 
            return 0;
        int sum = getSum(root->left) + getSum(root->right) + root->val;
        if(sum < minSum){
            //Update
            minSum = sum;
            minRoot = root;
        }
        return sum; //返回以当前节点为根的子树中，所有节点之和
    }
};


Version 2【纯分治】 --- 直接把问题分成子问题 即求在当前节点为根的树下子树中求出最小子树和以及他的位置
                       所以需要返回（1）以当前节点为根的子树中所有节点的和、（2）这个根节点的最小子树节点、（3）最小子树的和 
                       因为当前子树的和可能比之前的最小的还要小
                       【分治法的结果直接放在返回函数里面，且结果只来自于左右儿子】分治法常使用ResultType来包括所要返回的值，因为常需要返回多个值 

class ResultType{ //用ResultType返回多个值，而不用c++的引用来返回：是因为工业上如果以后需要更改代码，这样代码可读性更强且方便修改。
public:
    int sum;
    int minSum;
    TreeNode *minRoot;
    
    ResultType(int sum, int minSum, TreeNode *minRoot){
        this->sum = sum;
        this->minSum = minSum;
        this->minRoot = minRoot;
    }

};
class Solution {
public:
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
    TreeNode * findSubtree(TreeNode * root) {
        // write your code here
        ResultType result = divideConquer(root);
        return result.minRoot;
    }
    
private:
    ResultType divideConquer(TreeNode *root){
        if(root == NULL)
            return ResultType(0, INT_MAX, NULL); 
            //空节点的minSum需要返回极大值，他的爸爸找左or右节点(空)的最小值才不会出错
            
        //分治---左右子问题
        ResultType left = divideConquer(root->left);
        ResultType right = divideConquer(root->right);
        
        //计算当前树的和
        int sum = left.sum + right.sum + root->val;
        
        //先假设自己的值是最小的后面再更新
        ResultType result(sum, sum, root);
        //分别在左右子树中最小的比较
        if(left.minSum <= result.minSum){ //这里可以加上等于，保留最小子树；不加也可以
            //Update
            result.minSum = left.minSum;
            result.minRoot = left.minRoot;
        }
        if(right.minSum <= result.minSum){ //这里可以加上等于，保留最小子树；不加也可以
            //Update
            result.minSum = right.minSum;
            result.minRoot = right.minRoot;
        }
        
        return result;
    }
};
