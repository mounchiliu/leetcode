https://www.lintcode.com/problem/balanced-binary-tree/description
判断是否是平衡二叉树--- 一棵高度平衡的二叉树的定义是：一棵二叉树中每个节点的左右两个子树的深度相差不会超过1。
【分治思想--- 判断树是否平衡：即判断左右子树是否平衡，且左右的深度差是否为1】

//Version 1 返回一个值
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    bool isBalanced(TreeNode * root) {
        // write your code here
        int depth = maxDepth(root);
        return depth != NOT_BALANCED;
        
        
    }
    
private:
    //如果平衡，返回高度，不平衡返回一个常数 NOT_BALANCED
    int NOT_BALANCED = -1; //定义一个全局变量，这样可读性更强
    int maxDepth(TreeNode *root){
        if(root == NULL) //空节点是平衡二叉树， return 高度0 --- 这是递归停止的时候
                         //算法的时候可以从最底层也就是停止的时候网上想，空节点depth为0，返回上一层，depth就为0+1，一直返回到root
            return 0;
            
        //计算左右节点的深度、同时判断是否是平衡的，这样做就不用返回两个树   
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        
        //不平衡的情况
        if(left == NOT_BALANCED || right == NOT_BALANCED || abs(left - right) > 1)
            return NOT_BALANCED;
        
        //平衡的情况
        return max(left, right) + 1;
    }
};

//Version 2 利用ResultType 返回两个值 --- 一般为工业界的写法
class ResultType{
public:
    bool isValid;
    int depth;
    
    ResultType(bool isValid, int depth){
        this->isValid = isValid;
        this->depth = depth;
    }
    
 };
 

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    bool isBalanced(TreeNode * root) {
        // write your code here
        ResultType result = divideConquer(root);
    }
    
    ResultType divideConquer(TreeNode *root){
        if(root == NULL)
            return ResultType(true, 0);
        
        
        ResultType left = divideConquer(root->left);
        ResultType right = divideConquer(root->right);
        
        if(left.depth == NOT_BALANCED || right.depth == NOT_BALANCED || abs(left.depth - right.depth) > 1)
            return ResultType(false, NOT_BALANCED);
        
        return ResultType(true, max(left.depth, right.depth) + 1);
        
    }
    
private:
    int NOT_BALANCED = -1;
};
