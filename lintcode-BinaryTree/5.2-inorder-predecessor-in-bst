https://www.lintcode.com/problem/inorder-predecessor-in-bst/description 类似于5.1-binary-search-tree-iterator

（1） 该节点有左子树，那么该节点的前驱节点就是其左子树中最大的那个。--- 左拐，然后每次右拐就记录下来，寻找最大的

（2） 该节点没有左子树，那么就又有两种情况： 
1. 该节点是其父节点的右孩子，那么它的前驱就是他的父节点；
2. 该节点是其父节点的左孩子，那么就得往其祖辈寻找直到找到它祖辈是右孩子为止，如果没找到，那么说明该节点没有前驱节点。
每次记录右拐的root

【遍历】
如果p有左子树，直接往左找最右。如果没有，则从root一直找到p，其中向左拐不记录、向右拐记录predecessor
class Solution {
public:
    /**
     * @param root: the given BST
     * @param p: the given node
     * @return: the in-order predecessor of the given node in the BST
     */
    // 往左走的时候不记,往右走的时候记 
    TreeNode * inorderPredecessor(TreeNode * root, TreeNode * p) {
        // write your code here
        if(root == NULL || p == NULL)
            return NULL;
        
        TreeNode *predecessor = NULL;
        
        while(root){
            if(root->val >= p->val) //p在左子树
                root = root->left;
            else{                   //p在右子树
                predecessor = root;
                root = root->right;
            }
        }
        return predecessor;
    }
};
