https://www.lintcode.com/problem/maximum-depth-of-binary-tree/description
遍历发VS分治法

【遍历法】---遍历所有节点，计算每个节点的深度
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: An integer
     */
    int maxDepth(TreeNode * root) {
        // write your code here
        depth = 0;//root空的时候depth为0
        Traverse(root, 1);//root为空直接返回，得0；非空，root depth = 1
        return depth;
        
    }
private:
    int depth;
    
    void Traverse(TreeNode *node, int curDepth){
        if(node == NULL)
            return; //循环结束
            
        depth = max(depth, curDepth);
        Traverse(node->left, curDepth + 1);//左右子节点的depth都+1
        Traverse(node->right, curDepth + 1);
    }
};


【分治法】---分成两个子任务：因为二叉树的深度等于 MAX(左深度, 右深度) + 1
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: An integer
     */
    int maxDepth(TreeNode * root) {
        // write your code here
        // 处理异常 --- 底层没有儿子 return 0, 每往上走一个 + 1
        if(root == NULL) 
            return 0;
            
        // 对于每个节点，都分成左右两个子问题 计算左子树的最大深度
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        
        return max(left, right) + 1;
    } 
};
