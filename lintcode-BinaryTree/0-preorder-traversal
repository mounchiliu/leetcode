https://www.lintcode.com/problem/binary-tree-preorder-traversal/description
先序遍历（前序遍历） --- 首先访问根节点，按照根左右的顺序沿一定路径经过路径上所有的结点。在二叉树中，先根后左再右。
【三个答案】 --- 不适用递归的DFS（推荐）， 使用递归-一个个遍历， 使用递归-分治
https://www.jiuzhang.com/solution/binary-tree-preorder-traversal/#tag-lang-ALL


【Non-Recursive recommended】 --- DFS, use stack, first in last out
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: A Tree
     * @return: Preorder in ArrayList which contains node values.
     */
    vector<int> preorderTraversal(TreeNode * root) {
        // write your code here
        vector<int> preorder;
        traverse(preorder, root);
        return preorder;
        
    }
    
    void traverse(vector<int> &preorder, TreeNode *root) {
        if (root == NULL) {
            return;
        }
        
        
        //DFS --- 基本上和BFS是反的
        std::stack<TreeNode *> s;
        s.push(root);
        
        while(!s.empty()){
            TreeNode* node = s.top(); s.pop();
            preorder.push_back(node -> val);
            
            //【先右后左】因为左要现出来
            if(node->right != NULL)
                s.push(node->right);
            if(node->left != NULL)
                s.push(node->left);
        }

    }
};

【Recursive】
class Solution {
public:
    /**
     * @param root: A Tree
     * @return: Preorder in ArrayList which contains node values.
     */
    vector<int> preorderTraversal(TreeNode * root) {
        // write your code here
        vector<int> preorder;
        traverse(preorder, root);
        return preorder;
        
    }
    
    void traverse(vector<int> &preorder, TreeNode *root) { //因为preorder最为结果返回，所以要引用
        if (root == NULL) {
            return;
        }
        
        preorder.push_back(root->val);
        traverse(preorder, root->left);
        traverse(preorder, root->right);
    }
};

//分治写法


