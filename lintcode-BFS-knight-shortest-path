https://www.lintcode.com/problem/knight-shortest-path/description


/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

class Solution {
public:
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
    int shortestPath(vector<vector<bool>> &grid, Point &source, Point &destination) {
        // write your code here
        
        //Explanation
        //[2,0] 表示 row = 2; col = 0;
        
        int n = grid.size();
        int m = grid[0].size();
        
        vector<vector<int>> record(n, vector<int>(m, INT_MAX));//C++ vector 初始化

        record[source.x][source.y] = 0;

        vector<vector<int>> d = {{-2, -1}, {-2, 1}, {-1, 2}, {1, 2}, {2, 1}, {2, -1}, {1, -2}, {-1, -2}};

        queue<Point> Q;
        Q.push(source);
        while (!Q.empty()) {
            Point head = Q.front(); Q.pop();
            for (int k = 0; k < 8; ++k) {
                int x = head.x + d[k][0];//dir x
                int y = head.y + d[k][1];//dir y
                if (x >=0 && x < n && y >= 0 && y < m && !grid[x][y] &&
                    record[head.x][head.y] + 1 < record[x][y]) {
                    record[x][y] = record[head.x][head.y] + 1;//更新 record 值 从head跳至x、y坐标点处
                    Q.push(Point(x, y));
                }
            }
        }
        if (record[destination.x][destination.y] == INT_MAX)//没更新--> 跳不到
            return -1;
        return record[destination.x][destination.y];
        
        //Question -> How does it knows BFS find the shortest path? --> 画图举例你就能想明白，即在简单图中寻找嘴短距离
        
    }
};



mysolution:

/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */

class Solution {
public:
    /**
     * @param grid: a chessboard included 0 (false) and 1 (true)
     * @param source: a point
     * @param destination: a point
     * @return: the shortest path 
     */
     
     bool inBound(int x, int y, int m, int n){
         return (x>=0 && x<m && y>=0 && y<n);
     }
     
     
    int shortestPath(vector<vector<bool>> &grid, Point &source, Point &destination) {
        // write your code here
        
        //Explanation
        //[2,0] 表示 row = 2; col = 0;
        int m = grid.size();
        int n = grid[0].size();
        
        //Initilize
        vector<vector<int>> recorder (m, vector<int>(n,-1)); //【Note】C++中二维数组的初试话方式
        recorder[source.x][source.y] = 0 ;////使用recorder是为了让他不往回走
        
        //initialize direction
        vector<vector<int>> dir = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};
        
        //Initialize queue
        queue<Point> Q;
        Q.push(source);
        
        while(!Q.empty()){
            Point head = Q.front();
            Q.pop();
            
            for(int i = 0 ; i < dir.size(); i++){
                int x = head.x + dir[i][0];
                int y = head.y + dir[i][1];
                
                //in bound?
                if(inBound(x,y,m,n)){
                    if(!grid[x][y] && recorder[x][y]<0){//gridvalue == 0 && not be visited or recorded //使用recorder是为了让他不往回走
                        recorder[x][y] = recorder[head.x][head.y]+1; // record it.
                        Q.push(Point(x,y));
                    }
                }
            }
        }
        
        ///没更新--> 跳不到
        if(recorder[destination.x][destination.y]<0)
            return -1;
        else
            return recorder[destination.x][destination.y];
        
    }
};
