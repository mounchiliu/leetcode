https://www.lintcode.com/problem/first-position-of-target/description --- 第一个位置
https://www.lintcode.com/problem/classical-binary-search/description --- 任意一个位置

第一个位置：
【二分搜索的基本思路】
start指向左边，end指向右边
每次找正中间的坐标
【注意：递归和非递归写法都要会】

【模板的注意点】
1.  while (start + 1 < end) --- 防止死循环 e.g.[1,1]中寻找1 若用start<end 会死循环
2. mid = start + (end - start) / 2; --- 防止大数值溢出

【Non-recursive】 --- while loop
class Solution {
public:
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    int findPosition(vector<int> &nums, int target) {
        // write your code here
        //【Step 0】首先处理异常
         if (nums.size() == 0) {
            return -1;
        }
  
        //【Step1 缩小范围】，保证答案在start~end
        //定义首次指针
        int start = 0;
        int end = nums.size() - 1;//注意-1
        int mid;

        
        while (start + 1 < end) { //【start+1<end防止死循环】//这样写最后停下来的情况: 1. start和end挨着 2.start和end一个位置
            mid = start + (end - start) / 2;//【更新mid选取】 //若直接使用(start+end)/2， start+end值很大时会溢出 
            if (nums[mid] == target) {
                end = mid; //因为要找的是第一次出现的位置，这里不一定是第一次，所以不跳出，往前缩小范围
            } else if (nums[mid] < target) {
                start = mid; //or//start = mid + 1； 反正mid这个我可以不要
            } else if (nums[mid] > target) {
                end = mid; //or end = mid - 1;
                //for sorted array wit repeat numbers
            }
        }
        //最后把答案锁在 [start][end]范围内，并且s和e可以挨着也可以重合，我们只需要检验start=end
        //因为要找第一个所以先检查start。

        //【Step2】 找答案
        if (nums[start] == target) {//we only left case [start + 1 = target;] has not been considered
            return start;//for the case where we find first position, check start first
        }
        if (nums[end] == target) {
            return end;
        }
        
        //缩小的范围[start，end]内没找到，则找不到 返回-1
        return -1;
    }
};

【Recursive】
class Solution {
public:
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    int binarySearch(vector<int> &nums, int target) {
        // write your code here
        //【Step 0】处理异常
        if(nums.empty())
            return -1;
            
        int start = 0; 
        int end = nums.size() - 1;
        //递归三步走【1】定义递归：参数，返回值，含义
        return binaryRecursive(nums, start, end, target);
    }
    
    int binaryRecursive(vector<int> &nums, int start, int end, int &target){
        
        //递归三步走【3】定义递归何时结束 //当且仅当两种情况会结束 
                                          //1. start 与 end 正好挨着 即start+1=end
                                          //2. start 与 end 在同一个位置，即start==end
                                          //总结 start+1<=end
        if(start + 1 >= end){ //相当于把while loop 里面取反 while(start+ 1<end)
            if(nums[start] == target)
                return start;
            if(nums[end] == target)
                return end;
            return -1;
        }
        
        int mid = start + (end - start) / 2;
        
        if(nums[mid] == target)
            end = mid;
        if(nums[mid] > target) //target 在左边，向左缩范围
            end = mid - 1;
        if(nums[mid] < target) //target 在右边，向右缩范围
            start = mid + 1;
        
        //递归三步走【2】问题简化，即分解问题---这里是缩小范围继续二分搜索
        return binaryRecursive(nums, start, end, target);
    }
};




【Non-Recursive】
任意一个位置：
class Solution {
public:
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    int findPosition(vector<int> &nums, int target) {
        // write your code here
         if (nums.size() == 0) {
            return -1;
        }

        int start = 0;
        int end = nums.size() - 1;
        int mid;

        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid;
            } else if (nums[mid] > target) {
                end = mid;
            }
        }

        if (nums[start] == target) {
            return start;
        }
        if (nums[end] == target) {
            return end;
        }

        return -1;
    }
};

【Recursive】
class Solution {
public:
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
     
    int BinarySearch(vector<int> &nums, int start, int end, int &target){
        
        //【Step3】 递归何时结束
        if(start > end){
            return -1;//下面找到了mid
        }
        
        int mid = start + (end-start)/2;
        
        if(nums[mid] == target){
            return mid;
        }
        //若if中含有return，则可以不用else， 【else 会降低代码的可读性】
        
        if(nums[mid] > target){
            end = mid-1;
            //【Step2】 问题的拆解 --- 这里是缩小范围继续二分搜索
            return BinarySearch(nums, start, end, target);
        }
        
        if(nums[mid] < target){
            start = mid+1;
            return BinarySearch(nums, start, end, target);
        }

    }
     
    int findPosition(vector<int> &nums, int target) {
        // write your code here
        //【Step 1】递归的定义：参数，返回值，表达什么含义
        int start = 0;
        int end = nums.size()-1;
        return BinarySearch(nums, start, end, target);
    }
};

