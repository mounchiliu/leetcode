https://www.lintcode.com/problem/longest-palindrome/description?_from=ladder&&fromId=1  --- sol2的版本2列举了所有情况更好理解一点

SOL1: 哈希表?




SOL2:


class Solution {
public:
    int longestPalindrome(string s) {
        int charArray[52];
        
        //初始化为0
        memset(charArray,0,sizeof(charArray));

    
        // keep the times of appearance of each character in the array
        for (char ch: s) {
            if (ch >= 97) {
                charArray[26 + ch - 'a']++; //Ascii a --> 97    A --> 65
            }
            else {
                charArray[ch - 'A']++;
            }
        }

            
        int ans = 0;
        for(int i: charArray){
            ans += i/2*2; //e.g. 偶数次，则i个全算进去， 奇数次，算数去尾，算（i-1）--》偶数次；
            
            if(i%2==1 && ans%2 == 0)//可以选奇数次的字母作为一次对称轴，但要保证不能重复选取所以ans%2==0
                ans++;
        }
       
        return ans;
            
        }
        
        

    
};


OR:
class Solution {
public:
    int longestPalindrome(string s) {
        int charStatArray[52];
        int oneTimeOddCount = 0;
        int evenCount = 0;
    
        // zero clearing of the array
        memset(charStatArray, 0, sizeof(charStatArray));
    
        // keep the times of appearance of each character in the array
        for (char ch: s) {
            if (ch >= 97) {
                charStatArray[26 + ch - 'a']++; 
            }
            else {
                charStatArray[ch - 'A']++;
            }
        }
    
        // the answer is the count of characters that has even number of appereances.
        // for characters that has odd number of appereances,
        // their appereances minus 1 will make their apperances even.
        // And finally we can put an unused character in the middle of the palindrome
        // (if there is any).
        for (int cnt: charStatArray) {
            if (cnt != 0) {
                if (cnt % 2 == 0) {
                    evenCount += cnt;
                } else {
                    if (cnt == 1) {
                        oneTimeOddCount++;
                    }
                    else {
                        evenCount += cnt - 1;
                        oneTimeOddCount++;
                    }
                }
            }
        }
    
        return oneTimeOddCount > 0 ? 1 + evenCount : evenCount;
    }
};





