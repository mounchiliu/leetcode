https://www.lintcode.com/problem/string-permutation-ii/description

class Solution {
public:
    /**
     * @param str: A string
     * @return: all permutations
     */
    vector<string> stringPermutation2(string &str) {
        // write your code here
        if(str.size() <= 1){
            return {str};
        }
        
        sort(str.begin(), str.end());
        vector<string> results;
        string permute;
        vector<bool> visited(str.size(), false);
        dfs(str,visited, permute, results);
        return results;
    }
    
private:
    void dfs(string &str, vector<bool> &visited, string &permute, vector<string> &results){
        if(permute.size() == str.size()){
            results.push_back(permute);
            return;
        }
        
        for(int i = 0; i < str.size(); i++){
            if(visited[i])
                continue;
                
            if(i>0 && str[i] == str[i-1] && !visited[i-1])//先要判断i>0 顺序不可错
                continue;
         
            permute = permute + str[i]; 
            visited[i] = true;
            dfs(str, visited, permute, results);
            permute.pop_back();//string.pop_back() 删除末尾元素
            visited[i] = false;
        }
    }
};
