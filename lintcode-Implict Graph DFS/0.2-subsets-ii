https://www.lintcode.com/problem/subsets-ii/
与subset不同之处在于，这里带重复元素，所以要考虑去重的问题(去除重复的子集，但子集中可以存在合理的重复元素)

class Solution {
public:
    /**
     * @param nums: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int>> subsetsWithDup(vector<int> &nums) {
        // write your code here
        if(nums.size() == 0)
            return {{}};
            
        sort(nums.begin(), nums.end());
        vector<int> subset;
        vector<vector<int>> results;
        search(nums, 0, subset, results);
        return results;
    }
    
private:
    void search(vector<int> &nums, int start, vector<int> &subset, vector<vector<int>> &results){
        results.push_back(subset);
        
        for(int i = start; i < nums.size(); i++){
            if(nums[i] == nums[i-1] && i > start){//已经排序，重复元素会堆在一起
                continue; //i > start 表明i-1没有放到subset里面 i-1最小为start-1, i=start时可以放；
                          //当i = start + 1, 仍然为重复元素，【i=start的时候已经把这一层加入重复元素的机会用掉了】一层只能使用一次重复元素的机会，每次取最前面的那个
                          //要继续加重复元素，只有当[1,...,start]成为初始subset传入的时候才有机会.
            }
            
            
            subset.push_back(nums[i]);
            search(nums, i+1, subset, results);
            subset.pop_back();
        }
        
        //【如何去重】
        //利用有序性去重，比如[1,2,2]中，挑1个2的时候选择第一个2，需要挑2个2出来的时候再选第二个2
        //所以放一个数的时候检查一下，这个数前面有没有重复的元素
        //如果有，且这个元素不在subset内，就continue（证明之前已经考虑过他放入result了）
    }
};


