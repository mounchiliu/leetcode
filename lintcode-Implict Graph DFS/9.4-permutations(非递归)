https://www.lintcode.com/problem/permutations/description
https://www.lintcode.com/problem/permutations-ii/description

无论带不带重复元素，都可以使用

class Solution {
public:
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    vector<vector<int>> permute(vector<int> &nums) {
        // write your code here
        if(nums.empty())
            return {{}};
        
        sort(nums.begin(), nums.end());
        vector<vector<int>> results;
        
        bool hasNext = true;//next为true的时候表示可以继续迭代
        while(hasNext){
            results.push_back(nums);//第一个是升序的，字典序最小，然后一次找nex
            hasNext = nextPermutation(nums);//nextPermutation返回值为bool, 且原地修改nums
        }
        return results;
    }
    
private:
    bool nextPermutation(vector<int> &nums){
        int i = nums.size()-1;
        while(i>0 && nums[i-1] >= nums[i]){
            i--;
        }
        if(i == 0){
            return false;//全元素从左到右都是降序，这个排列是最后一个, 所以没有next
        }
        
        //i>0
        int j = nums.size()-1;
        while(nums[j] <= nums[i-1]){
            j--;
        }
        swap(nums[j], nums[i-1]);
        reverse(nums.begin()+i, nums.end());
        return true;
    }
};
