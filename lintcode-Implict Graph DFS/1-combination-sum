https://www.lintcode.com/problem/combination-sum/

给定一个候选数字的集合 candidates 和一个目标值 target. 找到 candidates 中所有的和为 target 的组合.
注意: 和subset不同之处
1. 添加限制，组合支中数据之和为target
2. subset无重复元素， 这题中给的数组中可存在重复元素
3. 在答案的同一个组合中, candidates 中的某个数字不限次数地出现 (所以搜索时从startIndex开始而不是subset中的startIndex+1)

相同点:
都是找组合数 是无序的， 因为这里比如1+2+3 = 1+3+2

class Solution {
   public:
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // write your code here
        vector<vector<int> > results(0);
        //集合为空
        if (candidates.size() == 0) {
            return results;
        }
        // 排序和去重
        //题目给的数据可以有重复数字、需要去重
        vector<int> candidatesNew = removeDuplicates(candidates);
        // dfs
        vector<int> current(0);
        dfs(candidatesNew, 0, current, target, results);
        return results;
    }

    vector<int> removeDuplicates(vector<int> candidates) {
        //排序
        sort(candidates.begin(), candidates.end());
        //去重
        int index = 0, n = candidates.size();
        for (int i = 0; i < n; i++) {
            if (candidates[i] != candidates[index]) {
                candidates[++index] = candidates[i];
            }
        }
        vector<int> candidatesNew;
        for (int i = 0; i < index + 1; i++) {
            candidatesNew.push_back(candidates[i]);
        }
        return candidatesNew;
    }
    
    /* //去重version2
    vector<int> removeDuplicate(vector<int> &candidates){
        sort(candidates.begin(), candidates.end());
        vector<int> result;
        result.push_back(candidates[0]);
        for(int i = 1; i < candidates.size(); i++){
            if(candidates[i-1] == candidates[i]){
                continue;
            }
            result.push_back(candidates[i]);
        }
        return result;
    }
    
    */

    void dfs(vector<int> &candidatesNew, int startIndex, vector<int> current, int remainTarget, vector<vector<int> > &results) {
        //到达边界
        if (remainTarget == 0) {
            results.push_back(current);
            return;
        }
        // 递归的拆解：挑一个数放入current
        for (int i = startIndex; i < candidatesNew.size(); i++) {
            //剪枝
            if (remainTarget < candidatesNew[i]) { //剪枝；这个不满足，往下的都不考虑
                break; //return;
            }
            current.push_back(candidatesNew[i]);
            //从剩下的数里选
            dfs(candidatesNew, i, current, remainTarget - candidatesNew[i], //继续从i开始，因为数字不限次数地出现. 
                results); //这里不能写 target =remainTarget - candidatesNew[i],再传target。因为这样target值变了，for循环后面的数字就不能得到正确结果
                          //不回头，比如一直选第一个元素的可能在i=start的时候往下递归， 当i=start+1时，剩下的需要的数，只考虑当前数以及之后数的组合情况。
            current.pop_back();
        }
    }
};
