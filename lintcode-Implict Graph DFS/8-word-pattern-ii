https://www.lintcode.com/problem/word-pattern-ii/

class Solution {
public:
    /**
     * @param pattern: a string,denote pattern string
     * @param str: a string, denote matching string
     * @return: a boolean
     */
    bool wordPatternMatch(string &pattern, string &str) {
        // write your code here
        if(pattern.empty())
            return str.empty();
        
        unordered_map<char, string> dict;//dict记录char对应的字符串
        unordered_set<string> used;//used记录这个配对的字符串是否被枚举过。
        return match(pattern, str, dict, used);
    }
    
private:
    bool match(const string &pattern, const string &str, unordered_map<char, string> dict, unordered_set<string> used){//const 不能丢，因为下面使用substr
        if(pattern.size() == 0)//传入的pattern已经越界
            return str.size() == 0;//查看对应的str是否一致
            
        char ch = pattern[0];
        
        //此前已经匹配过字母ch
        if(dict.count(ch)){
            string word = dict[ch];
            //ch对应的word当前无法和str前缀匹配---false
            if(str.compare(0,word.size(),word)){ //如果相等则输出为0，不等则输出为-1。
            //word是之前已经匹配好的"ch对应的string"，如果这里不匹配了，说明不符合规则
                return false;
            }
            
            //match --- continue to search
            //string.substr(pos) //get from pos to end
            return match(pattern.substr(1), str.substr(dict[ch].size()), dict, used); //pattern 每次取一个, 且找这个字符对应的在str里的字符串
        }
        
        //此前没有匹配的，建立匹配
        for(int i = 1; i <= str.size(); i++){ //从len=1开始枚举，一直到str.size()
            //枚举匹配的字符串
            string word = str.substr(0, i + 1);
            //字符串已经枚举过，进行剪枝 (如果这个有匹配的ch，上面已经匹配了；所以这里是没有匹配的情况，且已经枚举过，所以跳过)
            if(used.count(word))
                continue;
                
             // 下一步递归dfs
            dict[ch] = word;
            used.insert(word);
            if (match(pattern.substr(1), str.substr(i + 1), dict, used)) 
                return true;
            
            //后面的没匹配上，则backtracing，换其他的组合
            used.erase(word);
            dict.erase(ch);
        }
        return false;
    }
};
