https://www.lintcode.com/problem/word-search-ii/description

//同时找所有的单词---枚举起点。而不是枚举单词前缀一个个找


class Solution {
public:
    /**
     * @param board: A list of lists of character
     * @param words: A list of string
     * @return: A list of string
     */
    vector<string> wordSearchII(vector<vector<char>> &board, vector<string> &words) {
        // write your code here
        if(board.size() == 0)
            return {};
        
        vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(),false));
        unordered_map<string, bool> prefixIsWord = getPrefixSet(words);//为每个要搜索的单词枚举所有前缀
        unordered_set<string> wordSet;//使用set不直接使用vector string是因为 不同方向搜可能会有相同答案，这里的set可以去重
        
        //枚举起点[i][j]
        string word = "";//用于下方+board[i][j]转换成string
        for(int i = 0; i < board.size(); i++){//row
            for(int j = 0; j < board[i].size(); j++){//col
                visited[i][j] = true;
                dfs(board, visited, i, j, word+board[i][j], prefixIsWord, wordSet);//search
                visited[i][j] = false;//backtracing
            }
        }
        return vector<string>(wordSet.begin(), wordSet.end());
    }
    
private:
    unordered_map<string, bool> getPrefixSet(vector<string> words){
        unordered_map<string, bool> prefixIsWord;
        for(string &word: words){
            for(int i = 0; i < word.size()-1; i++){
                string prefix = word.substr(0,i+1);//start from the first letter
                if(!prefixIsWord.count(prefix)){//cant find it
                    prefixIsWord[prefix] = false;//单词的前缀定义：不是一个单词  
                    //即给前缀在哈希表里建立一个key, 但是值为false。
                }
            }
            prefixIsWord[word] = true;//对应单词,定义true，用于在格子中搜索
        }
        return prefixIsWord;
    }
    
    void dfs(vector<vector<char>> &board, vector<vector<bool>> &visited, int x, int y, string word, unordered_map<string, bool> &prefixIsWord, unordered_set<string> &wordSet){
        if(!prefixIsWord.count(word))//剪枝：当前传入的prefix(即word)已经不可匹配之前已存入的单词前缀
            return;
            
        if(prefixIsWord[word] == true)//哈希表找到，且为true
            wordSet.insert(word);//不return是因为apple找完了还有apples
        
        vector<vector<int>> dirs = {{1,0}, {0,1}, {-1,0}, {0,-1}};//four directions
        for(auto dir: dirs){
            int x_ = x + dir[0], y_ = y + dir[1];
            
            if(!inBound(board, x_, y_) || visited[x_][y_]){//not in bound or has been visited
                continue;
            }
            visited[x_][y_] = true;
            dfs(board, visited, x_, y_, word+board[x_][y_], prefixIsWord, wordSet);
            visited[x_][y_] = false;
        }
    }
    
    bool inBound(vector<vector<char>> &board, int x, int y){
        return x>=0 && x < board.size() && y >=0 && y < board[0].size(); 
    }
};
