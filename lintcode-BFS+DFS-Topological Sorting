https://www.lintcode.com/problem/topological-sorting/description
【拓扑排序的算法是典型的BFS算法，DFS也可以，但是不容易理解，所以不主流】
【且一般能用BFS做的问题，不要用dfs解决】---因为recursion实现的DFS可能造成Stack Overflow

//bfs(my solution) 
/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */

class Solution {
public:
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph./
     */
    vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*>& graph) {
        // write your code here
        //初始化拓扑序列
        vector<DirectedGraphNode*> result;
        if (graph.empty())
            return result;
        
        
        //1.对于graph中的每一个点，统计所有点的入度
        unordered_map<DirectedGraphNode*,int> MapForRecord;//unordered_map <key,value>
        for(auto &node: graph){   //注意for循环中 引用的用法 C++书
            for(auto &neighbor:node->neighbors){//如果node连向neighbour, neighbour的入度+1 
                if(MapForRecord.count(neighbor) == 0){//初始化
                    MapForRecord[neighbor] = 1;
                }
                else{
                    MapForRecord[neighbor]++;
                }
            }
        }
        
        
        //初始化queue
        queue<DirectedGraphNode*> Q;
        //2.将所有入度为0的点，放到宽度优先搜索的queue中
        //点没有入度->map里面没有他，放到queue里面和结果里面
        for(auto &node: graph){
            if(MapForRecord.count(node)==0){
                Q.push(node);
                result.push_back(node);
            }
        }
        
        //3.将队列中的点一个个释放出来，放到拓扑序列中，每次释放出某个点的时候就访问他的邻居，并把这个点的入度-1
        //如果发现入度为0->放入队列
        //直至队列为空
        while(!Q.empty()){
            auto &node = Q.front();
            Q.pop();
            
            for(auto &neighbor:node->neighbors){
                MapForRecord[neighbor]--;
                if(MapForRecord[neighbor]==0){
                    Q.push(neighbor);
                    result.push_back(neighbor);
                }
            }
        }
        return result;//这题return 任何一个拓扑即可，所以答案有多种
        
    }
};
//一个点入度变成0只有一次-->相当于记录了 所以不需要visit数组





dfs
class Solution {
public:
    void dfs(DirectedGraphNode* i, vector<DirectedGraphNode*> &ans, map<DirectedGraphNode*, int> &countrd,vector<DirectedGraphNode*> graph)         
    {
        ans.push_back(i);
        countrd[i]--;
        for(int j = 0; j < i->neighbors.size(); j++) {
		        countrd[i->neighbors[j]]--;
                if(countrd[i->neighbors[j]] == 0)
		        dfs(i->neighbors[j], ans, countrd, graph);
	    }
    }
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*> graph) {
        // write your code here
        map<DirectedGraphNode*, int> countrd;
        vector<DirectedGraphNode*> ans;
        for(int i = 0; i < graph.size(); i++)
            for(int j = 0; j < graph[i]->neighbors.size(); j++)
                 if (countrd.find(graph[i]->neighbors[j]) == countrd.end())
                    countrd[graph[i]->neighbors[j]] = 1;
                 else
                    countrd[graph[i]->neighbors[j]] += 1;

        for(int i = 0; i < graph.size(); i++)
            if(countrd[graph[i]] == 0)
                dfs(graph[i], ans, countrd, graph);
        return ans;
    }
};
