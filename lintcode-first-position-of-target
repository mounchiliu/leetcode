https://www.lintcode.com/problem/first-position-of-target/


class Solution {
public:
    int binarySearch(vector<int> &A, int target) {
        if (A.size() == 0) {
            return -1;
        }

        int start = 0;
        int end = A.size() - 1;
        int mid;

        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (A[mid] == target) {
                end = mid;
            } else if (A[mid] < target) {
                start = mid;
            } else if (A[mid] > target) {
                end = mid;
            }
        }

        if (A[start] == target) {
            return start;
        }
        if (A[end] == target) {
            return end;
        }

        return -1;
    }
};


my trun:
class Solution {
public:
    /**
     * @param nums: The integer array.
     * @param target: Target to find.
     * @return: The first position of target. Position starts from 0.
     */
    int binarySearch(vector<int> &nums, int target) {
        // write your code here
        //先处理异常，直接退出
        if(nums.size()==0){
            return -1;
        } 
        
        int start = 0;
        int end = nums.size()-1; //C++ vector.sizeof
        int mid = start + (end - start)*0.5;//尽量用乘法 
        
        //binarySearch
        while((start + 1) < end){ //search in the interval
            if(nums[mid] == target){
                end = mid;//for sorted array wit repeat numbers
            }
            else if(nums[mid] < target){
                start = mid;
            }else {//if(num[mid] > target){
                end = mid;
            }
        }
        
        
        if(nums[start] == target){//we only left case [start + 1 = target;] has not been considered
            return start;//for the case where we find first position, check start first
        }
        if(nums[end] == target){
            return end;
        }
        
        return -1; // we dont find it.
        
    }
};
