https://www.lintcode.com/problem/maximum-number-in-mountain-sequence/description
//VERSION1 二分法 【思路】找出这个数组中的变化：升序数组中a[i]<a[i+1], 降序数组中a[i]>a[i+1]
class Solution {
public:
    /**
     * @param nums a mountain sequence which increase firstly and then decrease
     * @return then mountain top
     */
    int mountainSequence(vector<int>& nums) {
        // Write your code here
        if(nums.empty())
            return 0;
            
        int left = 0, right = nums.size() - 1;
        while (left + 1 < right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] > nums[mid+1]) { //此时降序数组
                right = mid;//上山，往左
            } else {//升序数组
                left = mid; //下山往右
            }
        }
        return nums[left] > nums[right] ? nums[left] : nums[right]; //取两者最大的
    }
};



//一个比较啰嗦的版本，本质也是2分法，每次取两个点
class Solution {
public:
    /**
     * @param nums a mountain sequence which increase firstly and then decrease
     * @return then mountain top
     */
    int mountainSequence(vector<int>& nums) {
        // Write your code here
        int left = 0, right = nums.size() - 1;
        while (left + 1 < right) {
            int m1 = left + (right - left) / 2;//对于左侧升序
            int m2 = right - (right - m1) / 2;//对于右侧降序
            if (nums[m1] < nums[m2]) {
                left = m1 + 1;//上山往右走
            } else if (nums[m1] > nums[m2]) {
                right = m2 - 1;//下山往左走
            } else {
                left = m1;
                right = m2;
            }
        }
        return nums[left] > nums[right] ? nums[left] : nums[right]; //取两者最大的
    }
};
