https://www.lintcode.com/problem/ugly-number-ii/description

思路：不难发现生成丑数的规律：如果已知丑数ugly，那么ugly * 2，ugly * 3和ugly * 5也都是丑数。
既然求第n小的丑数，可以采用最小堆来解决。
相当于堆排序找第n小的丑数---时间复杂度 O(NlogN)

class Solution {
public:
    /**
     * @param n: An integer
     * @return: return a  integer as description.
     */
    int nthUglyNumber(int n) {
        // write your code here
        //n --- 第n小个数，需要排序
        if(n < 0)
            return -1;
        if(n == 1)
            return 1;
            
        /*
        //升序
        priority_queue <int,vector<int>,greater<int>> q;
        //降序
        priority_queue <int,vector<int>,less<int>>q;
        */
        //使用long防止越界
        priority_queue<long,vector<long>, greater<long>> heap;
        vector<int> factors = {2,3,5};
        set<long> seen; //record ugly numbers;
        
        heap.push(1L);//1 as long data structure
        
        long curUgly = heap.top();
        long newUgly;
        
        for(int i = 0; i < n; i++){
            curUgly = heap.top();
            heap.pop();
            
            //生成新的丑数
            for(int &f: factors){
                newUgly = curUgly * f;
                
                if(!seen.count(newUgly)){
                    seen.insert(newUgly);
                    heap.push(newUgly);
                }
            }
        }
        return (int)curUgly;
    }
};
