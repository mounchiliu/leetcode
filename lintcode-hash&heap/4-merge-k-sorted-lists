https://www.lintcode.com/problem/merge-k-sorted-lists/description
【了解此题有多种解法，要会至少两种写法,其中一个最好是堆】
Sol：
1. 自底向上的两两归并算法（1与2合并得a，3与4合并形成b，a与b合并）图见ppt51
形成一个树结构，层数为logk，即每个链表合并的次数为logK，一次合并中每个数贡献O(1)，一共有n个数 --- O(nlogk)
空间复杂度，需要递归logk层，所以O(logk)
        
2. 归并排序的分治算法（自顶向下，最后到最下面再return） --- 每一层的时间复杂度是O(n) 一共有logk层 所以 O(nlogk)
第一层，归并左右两块，每一块是k/2个链表，然后合起来。合起来一共O(n)，所以每层O(n)
那么他的下一层就是归并左右 k/4的链表。四个k/4个链表合起来一共O(n)，所以每层O(n)
空间复杂度，需要递归logk层，所以O(logk)

3. 每次比较k个头，取最小的，然后取出来的那个移动指针，（每次比较k个数，取最小 是使用堆来快速解决）---  O(nlogk)
空间复杂度，堆的大小不超过k，所以log(k)

 //【sol 1】
class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if(lists.size() == 0)
            return NULL;
        if(lists.size() == 1)
            return lists[0];
            
        vector<ListNode *> mergeTemp;
        for(int i = 0; i < lists.size()/2; i++){
            mergeTemp.push_back(
                mergeTwoLists(lists[i*2], lists[i*2+1]));
        }
        //for odd numbers of lists
        if(lists.size() % 2 == 1){
            mergeTemp.push_back(lists.back());
        }
        
        return mergeKLists(mergeTemp);
    }
private:
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2){
        //version 1 non-reversive
        /*if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        ListNode *dummy = new ListNode(-1);
        ListNode *ptr = dummy;
        while(l1 && l2){
            if(l1->val < l2->val){
                ptr->next = l1;
                l1 = l1->next;
            }else{
                ptr->next = l2;
                l2 = l2->next;
            }
            ptr = ptr->next;
        }
        
        while(l1){
            ptr->next = l1;
            l1 = l1->next;
            ptr = ptr->next;
        }
        while(l2){
            ptr->next = l2;
            l2 = l2->next;
            ptr = ptr->next;
        }
        return dummy->next;*/
        
        //version 2 recursive
        if(l1 == NULL)
            return l2;
        if(l2 == NULL)
            return l1;
        
        if(l1->val < l2->val){
            l1->next = mergeTwoLists(l1->next, l2); //l1为开头，整理l1身后的链表顺序即可
            return l1;
        }else{
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
        
    }
};
 
 //【sol2】 类似于归并排序merge sort 的写法
 class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if(lists.size() == 0)
            return NULL;
        if(lists.size() == 1)
            return lists[0];
            
        return mergeHelper(lists, 0, lists.size()-1);   
    }
    
private:
    ListNode* mergeHelper(vector<ListNode *> &lists, int start, int end){
        if(start == end)
            return lists[start];
            
        int mid = start + (end - start) / 2;
        ListNode* left = mergeHelper(lists, start, mid);
        ListNode* right = mergeHelper(lists, mid+1, end);
        return mergeTwo(left, right);
    }
    
    ListNode* mergeTwo(ListNode* l1, ListNode *l2){
        ListNode* dummy = new ListNode(0);
        ListNode* tail = dummy;
        while (l1 != NULL && l2 != NULL) {
            if (l1->val < l2->val) {
                tail->next = l1;
                tail = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                tail = l2;
                l2 = l2->next;
            }
        }
        if (l1 != NULL) {
            tail->next = l1;
        } else {
            tail->next = l2;
        }
        
        return dummy->next;
    }
};
 
 
 //【sol 3】
class Solution {
private:
    struct cmp{
        bool operator() (const ListNode* l1, const ListNode* l2){
            return l1->val > l2->val;//min heap
        }
    };

public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if(lists.empty())
            return NULL;
        if(lists.size() == 1)
            return lists[0];
            
        priority_queue<ListNode*, vector<ListNode*>, cmp> heap;
        for(ListNode* i: lists){
            if(i != NULL){//null 放进去没有比较的意义，所以跳过
                heap.push(i);//因为是排好序的，先把k个链表头放进去比大小，他们分别都是每个链表中最小的
            }
        }
        
        ListNode* dummy = new ListNode(-1);
        ListNode* ptr = dummy;
        while(!heap.empty()){
            ListNode* head = heap.top(); //每次取出最小的
            heap.pop();
            ptr->next = head; //最小的连在排好的后面
            ptr = head;//移动指针
            
            if(head->next != NULL){//查看取出最小值的链表，后面还有没有数据
                heap.push(head->next);
            }
        }
        return dummy->next;
    }
};
