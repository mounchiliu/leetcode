https://www.lintcode.com/problem/top-k-largest-numbers/description

思路1：离线算法 quickSort O(nlogn)

思路2：在线算法 使用堆 每次要排前k大，所以使用最小堆维护k个数字，这样可以O（1）找到k中最小的
class Solution {
public:
    /*
     * @param nums an integer array
     * @param k an integer
     * @return the top k largest numbers in array
     */
    vector<int> topk(vector<int>& nums, int k) {
        // Write your code here
        if(nums.size() < k)
            return {};
            
        priority_queue<int, vector<int>, greater<int>> heap;
        for(int i = 0; i < nums.size(); i++){
            heap.push(nums[i]);
            if(heap.size() > k){
                heap.pop();
            }
        }
        
        vector<int> result;
        while(!heap.empty()){
            result.push_back(heap.top());
            heap.pop();
        }
        
        reverse(result.begin(), result.end());
        return result;
    }
};
