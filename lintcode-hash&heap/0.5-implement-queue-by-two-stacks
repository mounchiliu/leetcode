https://www.lintcode.com/problem/implement-queue-by-two-stacks/description

//简洁快速版
//传统思想(下方版本2实现)：我们每取一次队头元素或者删掉队头元素，我们都需要将stack1中的元素先倒入到stack2中，再从stack2中倒回去，每次需要倒两边十分麻烦

//改进：其实当我们将stack1中的元素倒入到stack2中的时候，我们发现stack2中的元素的顺序就是按照队列的先进先出顺序
//那么我们不再将stack2中的元素倒入到stack1中，在获取队头元素或者删除队头元素的时候，我们先判断stack2是否为空
//如果不为空，从stack2中取即可，如果为空，那么将stack1中的元素倒入到stack2中
//push操作：每次加入元素的时候都是往stack1中加入元素。

class MyQueue {
public:
    MyQueue() {
        
    }
    /*
     * @param element: An integer
     * @return: nothing
     */
    void push(int element) {
        stack1.push(element);
    }
    /*
     * @return: An integer
     */
    int pop() {
        if (stack2.empty()) {
            move();
        }
        int result = stack2.top();
        stack2.pop();
        return result;
    }
    /*
     * @return: An integer
     */
    int top() {
        if (stack2.empty()) {
            move();
        }
        return stack2.top();
    }
    // 将1号栈中的元素转移到2号栈
    void move() {
        while (!stack1.empty()) {
            stack2.push(stack1.top());
            stack1.pop();
        }
    }
private:
    stack<int> stack1;
    stack<int> stack2;
};


//详细易懂版，但是慢
class MyQueue {
    stack<int> s1, s2;
public:
    MyQueue() {
        // do intialization if necessary
    }

    /*
     * @param element: An integer
     * @return: nothing
     */
    void push(int element) {
        // write your code here
        s1.push(element);
    }

    /*
     * @return: An integer
     */
    int pop() {
        // write your code here
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int res = s2.top();
        s2.pop();
        
        //recove;
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        
        return res;
    }

    /*
     * @return: An integer
     */
    int top() {
        // write your code here
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        int res = s2.top();
        
        //recove;
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        return res;
    }
};
