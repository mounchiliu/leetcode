https://www.lintcode.com/problem/lru-cache/

用来衡量最后访问时间，决策cache中放谁，满了踢谁，以及排列的顺序(后进来的顺序在前，或者一进来-又最先进来一次)，从而实现chache的快速访问
思路:1. 寻找一个数据结构，可以保证能快速剔除中间节点，且挪到最后 (链表 可以O(1)完成) --- 注意改动节点位置后，需要知道它前面的和后面的值，所以需要使用双向链表(pre、next)
(【如果使用单向链表, 只要在hashmap中每个key存前一个值】
2. 寻找一个数据结构，可以通过key得到对应value --- hashmap
3. 需要知道中间某个节点在链表中的位置---需要存储每个key在链表中的位置 --- hashmap

所以 我们使用hashmap + 链表
hashmap 中是 key - Listnode，且每个key都对应前一个Listnode (单向链表，使用这样的操作来记录前驱, 链表又自带后驱的记录功能)
key 和 对应的val 都放在listnode属性里面，节省一个哈希表

class LRUCache {
    class ListNode {
        public:
        int key, val;
        ListNode *next;
    
        //key 和 对应的val 都放在listnode属性里面，节省一个哈希表
        ListNode(int key, int val){
            this->key = key;
            this->val = val;
            //initialize next
            next = NULL;
        }
    };
    
    unordered_map<int, ListNode*> keyToPrev;
    ListNode *dummy, *tail;
    int capacity, size;//size---used capacity
    
public:
    /*
    * @param capacity: An integer
    */LRUCache(int capacity) {
        // do intialization if necessary
        this->dummy = new ListNode(-1, -1);
        this->tail = dummy;
        this->capacity = capacity;
        this->size = 0;
    }

    /*
     * @param key: An integer
     * @return: An integer
     */
    //查询
    int get(int key) {
        // write your code here
        //not find
        if(!keyToPrev.count(key)){
            return -1;
        }
        
        //find --- 最新访问的move to tail
        moveToTail(key);
        
        //the key has been moved to the end
        return tail->val;
    }

    /*
     * @param key: An integer
     * @param value: An integer
     * @return: nothing
     */
    void set(int key, int value) {
        // write your code here
        //get method will move the key to the tail
        if(get(key) != -1){
            //if find 
            //1. move to the tail(get method has done)
            //modify the next of the pre node
            ListNode *prev = keyToPrev[key];
            prev->next->val = value;//覆盖
            return;
        }
        
        //not find
        if(size < capacity){
            size++;
            ListNode *cur = new ListNode(key,value);
            tail->next = cur;
            keyToPrev[key] = tail;
            
            tail = cur;//move the ptr
            return;
        }
        
        //超出缓存上限
        //replace the first node with new key & value
        ListNode *first = dummy->next;
        //delete old info
        keyToPrev.erase(first->key);
        
        //update new info
        first->key = key;
        first->val = value;
        keyToPrev[key] = dummy;
        
        moveToTail(key);
    }
    
private:
    void moveToTail(int key){
        ListNode *pre = keyToPrev[key];
        ListNode *cur = pre->next;
        
        //if cur is the tail, return
        if(tail == cur){
            return;
        }
        
        pre->next = pre->next->next;//断开现有连接，跳过当前点。  千万不可写cur->next, 因为后续cur节点会改变，这里也会跟着变
        tail->next = cur;
        cur->next = NULL;
        
        //record the position of [pre->next] and [cur] --- 【只要链表的结构改变了，就一定要更新记录顺序的hashmap】
        if(pre->next != NULL)//这里可以不写这个if直接写if里的keyToPrev[pre->next->key] = pre; 因为这里已经保证了pre->next一定有值 
            keyToPrev[pre->next->key] = pre; //因为之前已经判断tail在cur前，而cur原来是pre->next，那pre->next->next 最差一定可以是tail(非空)
        keyToPrev[cur->key] = tail;
        
        tail = cur;//move the ptr
    }
};
