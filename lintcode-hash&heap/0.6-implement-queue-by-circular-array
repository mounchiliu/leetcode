https://www.lintcode.com/problem/implement-queue-by-circular-array/description

Circular array = a data structure that used a array as if it were connected end-to-start

1.队列的入队操作是只在队尾进行的，相对的出队操作是只在队头进行的，所以需要两个变量front与rear分别来指向队头与队尾
2.由于是循环队列，我们在增加元素时，如果此时 rear = array.length - 1 ，rear 需要更新为 0；
同理，在元素出队时，如果 front = array.length - 1, front 需要更新为 0. 对此，我们可以通过对数组容量取模来更新。



class CircularQueue {
private:
    vector<int> circular_array;
    int size;
    int start;
    int end;
    
public:
    /**
     * @return:  return true if the array is full
     */
    CircularQueue(int n) {
        // do intialization if necessary
        circular_array.resize(n+1, 0);
        size = n + 1;
        start = end = 0;
    }
    bool isFull() {
        // write your code here
        int start_mod = start - 1 < 0 ? size - 1 : start - 1;
        if(start_mod == end)
            return true;
        return false;
    }

    /**
     * @return: return true if there is no element in the array
     */
    bool isEmpty() {
        // write your code here
        if(start == end){
            return true;
        }
        return false;
    }

    /**
     * @param element: the element given to be added
     * @return: nothing
     */
    void enqueue(int element) {
        // write your code here
        if(isFull()){
            return;
        }
        //队尾入队
        circular_array[end] = element;
        end++;
        if(end == size){
            end = 0;//reset
        }
        return;
    }

    /**
     * @return: pop an element from the queue
     */
    int dequeue() {
        // write your code here
        if(isEmpty()){
            return INT_MIN;
        }
        //队头出队
        int element = circular_array[start];
        start++;
        if(start == size){
            start = 0;//reset
        }
        return element;
    }
};
