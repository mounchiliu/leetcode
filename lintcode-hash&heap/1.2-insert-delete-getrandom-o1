https://www.lintcode.com/problem/insert-delete-getrandom-o1/description

思路: 哈希表可以O(1)插入和删除，但是get Random不可以(hash里的key不一定连续)
数组因为是连续的，可以random一个index来实现O(1) get random

Sol:
使用数组来保存当前集合中的元素，同时用一个hashMap来保存数字与它在数组中下标的对应关系。

- 插入操作时：
若已存在此元素返回false
不存在时将新的元素插入数组最后一位，同时更新hashMap。

- 删除操作时：
若不存在此元素返回false
存在时先根据hashMap得到要删除数字的下标，再将数组的最后一个数放到需要删除的数的位置上，删除数组最后一位，同时更新hashMap。

- 获取随机数操作时：
根据数组的长度来获取一个随机的下标，再根据下标获取元素。

----------------------------------------------------------------------------------------------------------------------
Follow up: 这一题是无重复的数，如果允许重复的数该怎么做(面试了解思路即可)
这时，hashMap 的key是数组的值，value是他的index的话，就会出现一个key需要对应多个index的情况
【sol】 使用 <int, ListNode*> 结构的hashmap 来代替原来 <int, int> 的数据结构
- 插入 使用hashMap 还可以O(1)完成
- getRandom 因为还是在数组上存放值，可以O(1)完成
- 删除时，1. 一个val可能对应很多个index，如何快速确认要删的那个？ --- 这里需要删除val = 某个数值的数， 删除任意一个相同数值的都可以，所以直接【删头】
         2.  使用末尾的数补空洞，且需要调节末尾的数对应的hashMap中的ListNode相关信息
----------------------------------------------------------------------------------------------------------------------

class RandomizedSet {
private:
    vector<int> nums;
    unordered_map<int, int> num2index;
public:
    RandomizedSet() {
        // do intialization if necessary
    }

    /*
     * @param val: a value to the set
     * @return: true if the set did not already contain the specified element or false
     */
    bool insert(int val) {
        // write your code here
        //若已存在此元素返回false
        if(num2index.count(val)){
            return false;
        }
        //不存在时将新的元素插入数组最后一位，同时更新hashMap
        num2index[val] = nums.size();
        nums.push_back(val);
        return true;
    }

    /*
     * @param val: a value from the set
     * @return: true if the set contained the specified element or false
     */
    bool remove(int val) {
        // write your code here
        //若不存在此元素返回false
        if(!num2index.count(val)){
            return false;
        }
        
        //存在时先根据hashMap得到要删除数字的下标
        //再将数组的最后一个数放到需要删除的数的位置上 【用最后一个位置的来补要删的空洞---来使得数组连续】
        //删除数组最后一位，同时更新hashMap。
        int index = num2index[val];
        if(index < nums.size() -1){ //检查是不是最后一个，如果是直接删
            int last = nums.back();//当不是最后一个的时候，只要把最后一个的信息更新到前面就可以了，后面会直接删最后一个以及val的相关信息
            nums[index] = last;
            num2index[last] = index;//update hashMAp
        }
        num2index.erase(val);
        nums.pop_back();
        return true;

    }

    /*
     * @return: Get a random element from the set
     */
    int getRandom() {
        // write your code here
        return nums[rand() % nums.size()];
    }
};
