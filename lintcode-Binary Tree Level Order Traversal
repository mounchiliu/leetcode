https://www.lintcode.com/problem/binary-tree-level-order-traversal/description

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
 
class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Level order a list of lists of integer
     */
public:
    vector<vector<int>> levelOrder(TreeNode *root) { //注意description的格式数组内有数组
        //initialize
        vector<vector<int>> result;
        if (root == NULL) {//root无数值->直接返回空
            return result;//empty vector
        }
        
        queue<TreeNode *> Q;//queue模板的书写方式
        Q.push(root);
        while (!Q.empty()) {
            int size = Q.size();//先获取size, 不能把q.size()放到for循环里去
                                //因为你不断在往queue里面加数值,size一直在改变, 这样的话就相当于循环追着size跑
            vector<int> level;
            
            for (int i = 0; i < size; i++) { //前一层有多少元素被push进queue我这里就忘level里push多少个元素进去，当前level元素都推送 再放到结果里去。
                TreeNode *head = Q.front();//front()获取首元素  head获取了根的数值 //pointer
                Q.pop();//pop()删除首元素//delete the num from queue
                level.push_back(head->val);//push the first element into the vector
                if (head->left != NULL) {//左儿子不是空，放左边
                    Q.push(head->left);//推入的是左树的根即左儿子
                }
                if (head->right != NULL) {
                    Q.push(head->right);
                }//一直按照root,左树、右树、左树的root...来搜索    
                
                
                //queue first in first out
                //见课件的解析 第二章第九页
            }
            
            result.push_back(level);//level 放到结果里去
        }
        
        return result;
    }
};
时间复杂度, O(n)  --> 每个点进queue后出queue, 所以O（n）
