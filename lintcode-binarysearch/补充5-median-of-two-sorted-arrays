https://www.lintcode.com/problem/median-of-two-sorted-arrays/description
https://www.jiuzhang.com/problem/median-of-two-sorted-arrays/#tag-lang-ALL --- 多种算法
https://www.bilibili.com/video/BV1VE411D7k1?from=search&seid=7050076399532265643 --- 二分法

【思路】
直观思路：先合并数组，然后找中位数---线性O（n+m），n、m为两数组的size。 e.g. 归并排序
优化：对于线性的复杂度优化，我们常联想到O（log x）也就是二分

1.二分答案---类似wood cut ---  O(log(range)∗(log(n)+log(m)))
算法描述
我们需要先确定二分的上下界限，由于两个数组 A, B 均有序，所以下界为 start=min(A[0], B[0])，上界为 end = max(A[A.length - 1], B[B.length - 1]).
判断当前上下界限下的 mid(mid = (start + end) / 2) 是否为我们需要的答案；
这里我们可以分别对两个数组进行二分来找到两个数组中小于等于当前 mid 的数的个数 cnt1 与 cnt2，sum = cnt1 + cnt2 即为 A 跟 B 合并后小于等于当前mid的数的个数. 
---- 【计算cont的时候也用二分法，即找到第一个比targrt小的数，查看index得到个数】
如果 sum < k，即中位数肯定不是 mid，应该大于 mid，更新 start 为 mid，否则更新 end 为 mid，之后再重复第二步
当不满足 start + 1 < end 这个条件退出二分循环时，再分别判断一下 start 跟 end ，最终返回符合要求的那个数即可
算法详解
如果对该算法有点疑问，我们下面来详细讲解一下：

这一题如果用二分法来做，其实就是一个二分答案的过程
首先我们已经得到了上下界限，那么答案必定是在这个上下界限中的，需要实现的就是从这个歌上下界限中找出答案
我们每次取的 mid，其实就是我们每次在假设答案为 mid，二分的过程就是不断的推翻这个假设，然后再假设新的答案
需要满足的条件为：
上面算法描述中的 sum 需要等于 k，这里的 k = (A.length + B.length) / 2. 如果 sum < k，很明显当前的 mid 偏小，需要增大，否则就说明当前的 mid 偏大，需要缩小.
最终在 start 与 end 相邻的时候退出循环，判断 start 跟 end 哪个符合条件即可得到最终结果

2.每次找中间点 --- 先将找中点问题转换为找第 k 小的问题
每次找k/2，比较两个数组k/2处的数的大小，扔掉一部分元素 【最优】 --- O（log(m+n））
思路：当我要把复杂度从O（n）变成O（log n），我要考虑如何用O（1）的复杂度把问题规模缩小成之前一半
类似题目：median of unsorted array & find kth from unsorted aray

4. 基于每个数组的中位数比较
算出每个数组的中位数，两个数组的中位数一定在小的中位数和大的中位数之间
若a为小中位数，删除a中比中位数小的
b为大中位数，删除b中比中位数大的

//find k-th
class Solution {
public:
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    double findMedianSortedArrays(vector<int> &A, vector<int> &B) {
        int m = A.size(), n = B.size();
        // 如果是奇数---只有一个中位数
        if ((m + n) % 2 == 1) {
            return getKth(A, 0, B, 0, (m + n) / 2  + 1);//数组中第(m + n) / 2  + 1 是中位数
        }
        // 如果是偶数 ---- 两个取平均值
        int left = getKth(A, 0, B, 0, (m + n) / 2);
        int right = getKth(A, 0, B, 0, (m + n) / 2 + 1);
        return (left + right) / 2.0;  
    }
    
private:
    int getKth(vector<int>& A, int startA, vector<int>& B, int startB, int k) {
        
        //循环停止的三个情况
        if(startA >= A.size()) //A遍历完, 则在B中找第k个元素 //【注意等号】
            return B[startB + k - 1];
        if(startB >= B.size())
            return A[startA + k - 1];
        
        // 已经找到第k小的数---循环结束
        if (k == 1) {
            return min(A[startA], B[startB]);
        }
        
        
        //不用担心k是奇数k/2去尾，因为如果这里少看了，之后k-k/2还会把没看的元素补回来
        //比较两个数组中第k/2的元素，用来舍弃一部分元素
        int halfKthA = startA + k / 2 - 1 < A.size() 
                        ? A[startA + k / 2 - 1] : INT_MAX;
        //如果这个index算出来不在A的index范围内，赋值无穷大 
        //因为比如一个特殊情况，A数组size很小，B很大，A没有第k/2个元素，则应该从B中删除k/2元素，因为A中数组个数+k/2 < k，也就是B中前k/2个一定不是两个数组合起来的k个元素
        int halfKthB = startB + k /2 - 1 < B.size()
                       ? B[startB + k / 2 - 1] :INT_MAX;
        
        
        if(halfKthA < halfKthB){//A的第K/2个元素小，删除A的
            return getKth(A, startA + k / 2, B, startB, k - k / 2);
        }
        if(halfA > halfB) 
            return findkth(A, startA, B, startB + k/2, k - k/2);
        if(halfA == halfB) //相等，k/2+k/2 = k 不用找了
            return halfA;
        
    }
};
