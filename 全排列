http://cxsjsxmooc.openjudge.cn/2019t2summer2/001/

ANS:

sort 对于string的排列也可以写为:

#include<cstdio>
#include<cstring>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;
bool rule(char a,char b)
{
    return a>b;
}
int main()
{
    string a;
    cin>>a;
    sort(a.begin(),a.end());//默认从小到大
    cout<<a<<endl;
    sort(a.begin(),a.end(),rule);//从大到小
    cout<<a<<endl;
    return 0;
}

//Note: string's length ==> string s; s.length();


#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
using namespace std;
const int M = 8;
char str[M];
char permutation[M];
bool used[M] = {0};//false
int L = 0;
void Permutation(int n)
{	
	if( n == L ) {
		permutation[L] = 0;//the end of char
		cout << permutation << endl;
		return ;
	}
	for(int i = 0;i < L; ++i) {
		if( !used[i]) {//false
			used[i] = true; //label the char has used
		      //思路: 如有abc三个字母, 已经按照升序排好, 先排第一位a, 剩下两个, 排第二位时, a used, 所以尝试, 接着c... --> abc
                      // 接着 返回到第二位, 尝试c, 第三位时c已用, --> acb
                      // 每一位上都会按照 abc 的升序依次进行尝试, (abc已经排列好) 当前已经使用的则跳过尝试下一个字母  --> recursive
			permutation[n] = str[i];
			Permutation(n+1);
			used[i] = false;//该层循环尝试完毕, 所有可能情况已试出, 恢复成false
		}
	}
  return;
}
int main()
{
	cin >> str;
	L = strlen(str);
	sort(str,str+L); //sort the string or the char
	Permutation(0);
	return 0;	
}
