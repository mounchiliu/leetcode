https://www.lintcode.com/problem/last-position-of-target/
【思路】和first position 以及 classical binary search（任意位置） 类似, 只是需要注意一下指针更新的方法


【Non-recursive】
class Solution {
public:
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    int lastPosition(vector<int> &nums, int target) {
        // write your code here
        if(nums.empty())
            return -1;
            
        int start = 0, end = nums.size() - 1;
        int mid;
        
        while(start + 1 < end){
            mid = start + (end - start) / 2;
            
            if(nums[mid] == target)
                start = mid; //往右缩范围，因为找的最后一个
            
            if(nums[mid] < target)
                start = mid + 1;//这里不需要变，也可以不写+1
            if(nums[mid] > target)
                end = mid - 1; //这里不需要变，也可以不写-1
        }
        
        
        //查找答案 --- 找最后一个所以先查找的是end
        if(nums[end] == target)
            return end;
        if(nums[start] == target)
            return start;
        return -1;
    }
};

【Recursive】
class Solution {
public:
    /**
     * @param nums: An integer array sorted in ascending order
     * @param target: An integer
     * @return: An integer
     */
    int lastPosition(vector<int> &nums, int target) {
        // write your code here
        if(nums.empty())
            return -1;
            
        return binarySearch(nums, 0, nums.size()-1, target);
    }
    
    int binarySearch(vector<int> &nums, int start, int end, int &target){
        if(start + 1 >= end){
            if(nums[end] == target)
                return end;
            if(nums[start] == target)
                return start;
            return -1;
        }
        
        int mid = start + (end - start) / 2;
        
        if(nums[mid] == target)
            start = mid;
            
        if(nums[mid] < target)
            start = mid + 1;
        if(nums[mid] > target)
            end = mid - 1;
        return binarySearch(nums, start, end, target);
    }
    
};
